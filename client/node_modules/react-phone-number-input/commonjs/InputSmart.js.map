{"version":3,"sources":["../source/InputSmart.js"],"names":["createInput","defaultMetadata","InputSmart","ref","country","international","withCountryCallingCode","metadata","rest","format","value","formatter","AsYouType","prefix","text","input","template","getTemplate","parsePhoneNumberCharacter","React","forwardRef","propTypes","PropTypes","string","isRequired","onChange","func","bool","object","defaultProps"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;AAEO,SAASA,WAAT,CAAqBC,eAArB,EACP;AACC;;;;;;;AAOA,WAASC,UAAT,OAMGC,GANH,EAMQ;AAAA,QALPC,OAKO,QALPA,OAKO;AAAA,QAJPC,aAIO,QAJPA,aAIO;AAAA,QAHPC,sBAGO,QAHPA,sBAGO;AAAA,QAFPC,QAEO,QAFPA,QAEO;AAAA,QADJC,IACI;;AACP,QAAMC,MAAM,GAAG,wBAAY,UAACC,KAAD,EAAW;AACrC;AACA,UAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAcR,OAAd,EAAuBG,QAAvB,CAAlB;AACA,UAAMM,MAAM,GAAG,2CAAoB;AAClCT,QAAAA,OAAO,EAAPA,OADkC;AAElCC,QAAAA,aAAa,EAAbA,aAFkC;AAGlCC,QAAAA,sBAAsB,EAAtBA,sBAHkC;AAIlCC,QAAAA,QAAQ,EAARA;AAJkC,OAApB,CAAf,CAHqC,CASrC;;AACA,UAAIO,IAAI,GAAGH,SAAS,CAACI,KAAV,CAAgBF,MAAM,GAAGH,KAAzB,CAAX;AACA,UAAIM,QAAQ,GAAGL,SAAS,CAACM,WAAV,EAAf;;AACA,UAAIJ,MAAJ,EAAY;AACXC,QAAAA,IAAI,GAAG,8CAAuBA,IAAvB,EAA6BD,MAA7B,CAAP,CADW,CAEX;;AACA,YAAIG,QAAJ,EAAc;AACbA,UAAAA,QAAQ,GAAG,8CAAuBA,QAAvB,EAAiCH,MAAjC,CAAX;AACA;AACD;;AACD,aAAO;AACNC,QAAAA,IAAI,EAAJA,IADM;AAENE,QAAAA,QAAQ,EAARA;AAFM,OAAP;AAIA,KAvBc,EAuBZ,CAACZ,OAAD,EAAUG,QAAV,CAvBY,CAAf;AAwBA,WACC,gCAAC,kBAAD,eACKC,IADL;AAEC,MAAA,GAAG,EAAEL,GAFN;AAGC,MAAA,KAAK,EAAEe,+BAHR;AAIC,MAAA,MAAM,EAAET;AAJT,OADD;AAOA;;AAEDP,EAAAA,UAAU,GAAGiB,kBAAMC,UAAN,CAAiBlB,UAAjB,CAAb;AAEAA,EAAAA,UAAU,CAACmB,SAAX,GAAuB;AACtB;;;;;;;AAOAX,IAAAA,KAAK,EAAEY,sBAAUC,MAAV,CAAiBC,UARF;;AAUtB;;;;AAIAC,IAAAA,QAAQ,EAAEH,sBAAUI,IAAV,CAAeF,UAdH;;AAgBtB;;;;;;;;;;AAUApB,IAAAA,OAAO,EAAEkB,sBAAUC,MA1BG;;AA4BtB;;;;;;;;;;AAUAlB,IAAAA,aAAa,EAAEiB,sBAAUK,IAtCH;;AAwCtB;;;;;;AAMArB,IAAAA,sBAAsB,EAAEgB,sBAAUK,IA9CZ;;AAgDtB;;;AAGApB,IAAAA,QAAQ,EAAEe,sBAAUM,MAAV,CAAiBJ;AAnDL,GAAvB;AAsDAtB,EAAAA,UAAU,CAAC2B,YAAX,GAA0B;AACzBtB,IAAAA,QAAQ,EAAEN;AADe,GAA1B;AAIA,SAAOC,UAAP;AACA;;eAEcF,WAAW,E","sourcesContent":["import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Input from 'input-format/react'\r\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix'\r\n\r\nexport function createInput(defaultMetadata)\r\n{\r\n\t/**\r\n\t * `InputSmart` is a \"smarter\" implementation of a `Component`\r\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\r\n\t * the user's and maintains the caret's position in the process.\r\n\t * The caret positioning is maintained using `input-format` library.\r\n\t * Relies on being run in a DOM environment for calling caret positioning functions.\r\n\t */\r\n\tfunction InputSmart({\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tmetadata,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst format = useCallback((value) => {\r\n\t\t\t// \"As you type\" formatter.\r\n\t\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t\tconst prefix = getInputValuePrefix({\r\n\t\t\t\tcountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\twithCountryCallingCode,\r\n\t\t\t\tmetadata\r\n\t\t\t})\r\n\t\t\t// Format the number.\r\n\t\t\tlet text = formatter.input(prefix + value)\r\n\t\t\tlet template = formatter.getTemplate()\r\n\t\t\tif (prefix) {\r\n\t\t\t\ttext = removeInputValuePrefix(text, prefix)\r\n\t\t\t\t// `AsYouType.getTemplate()` can be `undefined`.\r\n\t\t\t\tif (template) {\r\n\t\t\t\t\ttemplate = removeInputValuePrefix(template, prefix)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\ttext,\r\n\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}, [country, metadata])\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tparse={parsePhoneNumberCharacter}\r\n\t\t\t\tformat={format}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputSmart = React.forwardRef(InputSmart)\r\n\r\n\tInputSmart.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `value: string`.\r\n\t\t * Updates the `value` property.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tInputSmart.defaultProps = {\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn InputSmart\r\n}\r\n\r\nexport default createInput()"],"file":"InputSmart.js"}