{"version":3,"sources":["../../source/react-hook-form/ReactHookFormInput.js"],"names":["ReactHookFormInput","ref","Component","name","defaultValue","shouldUnregister","control","rules","onChange_","onChange","onBlur_","onBlur","rest","internalRef","setRef","instance","current","undefined","renderInputComponent","restReactHookFormControlledFieldProps","focus","setComponentRef","onChangeCombined","value","onBlurCombined","event","onFocus","props","field","React","forwardRef","propTypes","PropTypes","elementType","isRequired","string","bool","object","func"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback, useImperativeHandle } from 'react'\r\nimport { Controller } from 'react-hook-form'\r\nimport PropTypes from 'prop-types'\r\n\r\nlet ReactHookFormInput = ({\r\n  Component,\r\n  name,\r\n  defaultValue,\r\n  shouldUnregister,\r\n  control,\r\n  rules,\r\n  onChange: onChange_,\r\n  onBlur: onBlur_,\r\n  ...rest\r\n}, ref) => {\r\n  const internalRef = useRef()\r\n\r\n  const setRef = useCallback((instance) => {\r\n    internalRef.current = instance\r\n    if (ref) {\r\n      if (typeof ref === 'function') {\r\n        ref(instance)\r\n      } else {\r\n        ref.current = instance\r\n      }\r\n    }\r\n  }, [ref])\r\n\r\n  // `feact-hook-form` doesn't know how to properly handle `undefined` values.\r\n  // https://github.com/react-hook-form/react-hook-form/issues/2990\r\n  defaultValue = defaultValue === undefined ? null : defaultValue\r\n\r\n  const renderInputComponent = ({\r\n    ref,\r\n    onChange,\r\n    onBlur,\r\n    // `restReactHookFormControlledFieldProps` contain properties like `name` and `value`.\r\n    // https://github.com/react-hook-form/react-hook-form/blob/b0e6c3057ac12a7b12d5616aecf3791acb7d7204/src/types/controller.ts#L21-L30\r\n    ...restReactHookFormControlledFieldProps\r\n  }) => {\r\n    // Setting `ref` passed by `react-hook-form` results in a bug:\r\n    // when an initial value is defined (example: \"+78005553535\")\r\n    // it seems to be set directly on the `ref`d `<input/>`\r\n    // by `react-hook-form` and the result is a non-formatted\r\n    // \"+78005553535\" initial value in the `<input/>`.\r\n    //\r\n    // To work around that bug, a fake `ref` is assigned,\r\n    // so that it could only `.focus()` it and no more.\r\n    //\r\n    // `useImperativeHandle()` hook seems to allow `ref` being `undefined`.\r\n    //\r\n    // if (ref) {\r\n      useImperativeHandle(ref, () => ({\r\n        focus() {\r\n          internalRef.current.focus()\r\n        }\r\n      }))\r\n    // }\r\n\r\n    const setComponentRef = useCallback((instance) => {\r\n      setRef(instance)\r\n      // if (ref) {\r\n      //   if (typeof ref === 'function') {\r\n      //     ref(instance)\r\n      //   } else {\r\n      //     ref.current = instance\r\n      //   }\r\n      // }\r\n    }, [ref, setRef])\r\n\r\n    const onChangeCombined = useCallback((value) => {\r\n      // `feact-hook-form` doesn't know how to properly handle `undefined` values.\r\n      // https://github.com/react-hook-form/react-hook-form/issues/2990\r\n      if (value === undefined) {\r\n        value = null\r\n      }\r\n      onChange(value)\r\n      if (onChange_) {\r\n        onChange_(value)\r\n      }\r\n    }, [\r\n      onChange,\r\n      onChange_\r\n    ])\r\n\r\n    const onBlurCombined = useCallback((event) => {\r\n      onBlur(event)\r\n      if (onBlur_) {\r\n        onBlur_(event)\r\n      }\r\n    }, [\r\n      onBlur,\r\n      onBlur_\r\n    ])\r\n\r\n    return (\r\n      <Component\r\n        {...rest}\r\n        {...restReactHookFormControlledFieldProps}\r\n        ref={setComponentRef}\r\n        onChange={onChangeCombined}\r\n        onBlur={onBlurCombined}/>\r\n    )\r\n  }\r\n\r\n  // `react-hook-form@7` no longer accepts `onFocus` property.\r\n  // Since this component can be used with both `v6` and `v7`,\r\n  // the `onFocus` property is left here.\r\n  const onFocus = useCallback(() => {\r\n    // internalRef.current.disabled = false\r\n    internalRef.current.focus()\r\n  }, [])\r\n\r\n  return (\r\n    <Controller\r\n      control={control}\r\n      name={name}\r\n      defaultValue={defaultValue}\r\n      shouldUnregister={shouldUnregister}\r\n      rules={rules}\r\n      onFocus={onFocus}\r\n      render={(props) => {\r\n        // Differentiate between `react-hook-form@6` and `react-hook-form@7`.\r\n        // https://react-hook-form.com/migrate-v6-to-v7/\r\n        // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/57\r\n        // `props` (before v7) and `props.fields` (in v7) contain properties like:\r\n        // `ref`, `name`, `value`, `onChange`, `onBlur`.\r\n        // https://github.com/react-hook-form/react-hook-form/blob/b0e6c3057ac12a7b12d5616aecf3791acb7d7204/src/types/controller.ts#L21-L30\r\n        return renderInputComponent(props.field || props)\r\n      }}/>\r\n  )\r\n}\r\n\r\nReactHookFormInput = React.forwardRef(ReactHookFormInput)\r\n\r\nReactHookFormInput.propTypes = {\r\n  Component: PropTypes.elementType.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  defaultValue: PropTypes.string,\r\n  // A quote from `react-hook-form`:\r\n  // Without `shouldUnregister: true`, an input value would be retained when input is removed.\r\n  // Setting `shouldUnregister: true` makes the form behave more closer to native.\r\n  shouldUnregister: PropTypes.bool,\r\n  control: PropTypes.object.isRequired,\r\n  rules: PropTypes.object,\r\n  onChange: PropTypes.func,\r\n  onBlur: PropTypes.func\r\n}\r\n\r\nexport default ReactHookFormInput"],"file":"ReactHookFormInput.js"}