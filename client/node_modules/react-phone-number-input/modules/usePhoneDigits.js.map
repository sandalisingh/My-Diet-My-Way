{"version":3,"sources":["../source/usePhoneDigits.js"],"names":["useRef","useState","useCallback","useEffect","AsYouType","getCountryCallingCode","parseDigits","getInternationalPhoneNumberPrefix","usePhoneDigits","value","onChange","country","defaultCountry","international","withCountryCallingCode","useNationalFormatForDefaultCountryValue","metadata","countryMismatchDetected","onCountryMismatch","actualCountry","console","error","current","getInitialPhoneDigits","options","getPhoneDigitsForValue","args","apply","prevCountry","setPrevCountry","prevDefaultCountry","setPrevDefaultCountry","phoneDigits","setPhoneDigits","valueForPhoneDigits","setValueForPhoneDigits","rerenderTrigger","setRerenderTrigger","rerender","getValueForPhoneDigits","asYouType","input","getNumberValue","onSetPhoneDigits","prefix","indexOf","undefined","slice","phoneNumber","getNumber","countryCallingCode","nationalNumber","formatNational"],"mappings":"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","sourcesContent":["import { useRef, useState, useCallback, useEffect } from 'react'\r\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix'\r\n\r\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\r\nexport default function usePhoneDigits({\r\n\tvalue,\r\n\tonChange,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata\r\n}) {\r\n\tconst countryMismatchDetected = useRef()\r\n\tconst onCountryMismatch = (value, country, actualCountry) => {\r\n\t\tconsole.error(`[react-phone-number-input] Expected phone number ${value} to correspond to country ${country} but ${actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t'}.`)\r\n\t\tcountryMismatchDetected.current = true\r\n\t}\r\n\r\n\tconst getInitialPhoneDigits = (options) => {\r\n\t\treturn getPhoneDigitsForValue(\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tdefaultCountry,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata,\r\n\t\t\t(...args) => {\r\n\t\t\t\tif (options && options.onCountryMismatch) {\r\n\t\t\t\t\toptions.onCountryMismatch()\r\n\t\t\t\t}\r\n\t\t\t\tonCountryMismatch.apply(this, args)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\t// This is only used to detect `country` property change.\r\n\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\t// This is only used to detect `defaultCountry` property change.\r\n\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\r\n\t// `phoneDigits` is the `value` passed to the `<input/>`.\r\n\tconst [phoneDigits, setPhoneDigits] = useState(getInitialPhoneDigits())\r\n\t// This is only used to detect `value` property changes.\r\n\tconst [valueForPhoneDigits, setValueForPhoneDigits] = useState(value)\r\n\r\n\t// Rerender hack.\r\n\tconst [rerenderTrigger, setRerenderTrigger] = useState()\r\n\tconst rerender = useCallback(() => setRerenderTrigger({}), [setRerenderTrigger])\r\n\r\n\tfunction getValueForPhoneDigits(phoneDigits) {\r\n\t\t// If the user hasn't input any digits then `value` is `undefined`.\r\n\t\tif (!phoneDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (country && international && !withCountryCallingCode) {\r\n\t\t\tphoneDigits = `+${getCountryCallingCode(country, metadata)}${phoneDigits}`\r\n\t\t}\r\n\t\t// Return the E.164 phone number value.\r\n\t\t//\r\n\t\t// Even if no \"national (significant) number\" digits have been input,\r\n\t\t// still return a non-`undefined` value.\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\r\n\t\t//\r\n\t\t// For example, if the user has selected country `US` and entered `\"1\"`\r\n\t\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\r\n\t\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\r\n\t\t// because otherwise the app would think that the input is empty and mark it as such\r\n\t\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\r\n\t\t// a \"weird\" behavior.\r\n\t\t//\r\n\t\t// The only case when there's any input and `getNumberValue()` still returns `undefined`\r\n\t\t// is when that input is `\"+\"`.\r\n\t\t//\r\n\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\r\n\t\tasYouType.input(phoneDigits)\r\n\t\treturn asYouType.getNumberValue()\r\n\t}\r\n\r\n\t// If `value` property has been changed externally\r\n\t// then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (value !== valueForPhoneDigits) {\r\n\t\t\tsetValueForPhoneDigits(value)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [value])\r\n\r\n\t// If the `country` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (country !== prevCountry) {\r\n\t\t\tsetPrevCountry(country)\r\n\t\t\tlet countryMismatchDetected\r\n\t\t\tconst phoneDigits = getInitialPhoneDigits({\r\n\t\t\t\tonCountryMismatch() {\r\n\t\t\t\t\tcountryMismatchDetected = true\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsetPhoneDigits(phoneDigits)\r\n\t\t\tif (countryMismatchDetected) {\r\n\t\t\t\tsetValueForPhoneDigits(getValueForPhoneDigits(phoneDigits))\r\n\t\t\t}\r\n\t\t}\r\n\t}, [country])\r\n\r\n\t// If the `defaultCountry` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (defaultCountry !== prevDefaultCountry) {\r\n\t\t\tsetPrevDefaultCountry(defaultCountry)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [defaultCountry])\r\n\r\n\t// Update the `value` after `valueForPhoneDigits` has been updated.\r\n\tuseEffect(() => {\r\n\t\tif (valueForPhoneDigits !== value) {\r\n\t\t\tonChange(valueForPhoneDigits)\r\n\t\t}\r\n\t}, [valueForPhoneDigits])\r\n\r\n\tconst onSetPhoneDigits = useCallback((phoneDigits) => {\r\n\t\tlet value\r\n\t\tif (country) {\r\n\t\t\tif (international && withCountryCallingCode) {\r\n\t\t\t\t// The `<input/>` value must start with the country calling code.\r\n\t\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\t\t\t// If a user tabs into a phone number input field\r\n\t\t\t\t\t// that is `international` and `withCountryCallingCode`,\r\n\t\t\t\t\t// and then starts inputting local phone number digits,\r\n\t\t\t\t\t// the first digit would get \"swallowed\" if the fix below wasn't implemented.\r\n\t\t\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// // Reset phone digits if they don't start with the correct prefix.\r\n\t\t\t\t\t\t// // Undo the `<input/>` value change if it doesn't.\r\n\t\t\t\t\t\tif (countryMismatchDetected.current) {\r\n\t\t\t\t\t\t\t// In case of a `country`/`value` mismatch,\r\n\t\t\t\t\t\t\t// if it performed an \"undo\" here, then\r\n\t\t\t\t\t\t\t// it wouldn't let a user edit their phone number at all,\r\n\t\t\t\t\t\t\t// so this special case at least allows phone number editing\r\n\t\t\t\t\t\t\t// when `value` already doesn't match the `country`.\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// If it simply did `phoneDigits = prefix` here,\r\n\t\t\t\t\t\t\t// then it could have no effect when erasing phone number\r\n\t\t\t\t\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t\t\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t\t\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t\t\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t\t\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t\t\t\t\t// forcefully rerendered here.\r\n\t\t\t\t\t\t\tsetPhoneDigits(prefix)\r\n\t\t\t\t\t\t\tsetValueForPhoneDigits(undefined)\r\n\t\t\t\t\t\t\t// Force a re-render of the `<input/>` with previous `phoneDigits` value.\r\n\t\t\t\t\t\t\treturn rerender()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Entering phone number either in \"national\" format\r\n\t\t\t\t// when `country` has been specified, or in \"international\" format\r\n\t\t\t\t// when `country` has been specified but `withCountryCallingCode` hasn't.\r\n\t\t\t\t// Therefore, `+` is not allowed.\r\n\t\t\t\tif (phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\t\t\t// Remove the `+`.\r\n\t\t\t\t\tphoneDigits = phoneDigits.slice(1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (!defaultCountry) {\r\n\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t// when no `country` and `defaultCountry` have been specified.\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t// Prepend a `+`.\r\n\t\t\t\tphoneDigits = '+' + phoneDigits\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Convert `phoneDigits` to `value`.\r\n\t\tif (phoneDigits) {\r\n\t\t\tvalue = getValueForPhoneDigits(phoneDigits)\r\n\t\t}\r\n\t\tsetPhoneDigits(phoneDigits)\r\n\t\tsetValueForPhoneDigits(value)\r\n\t}, [\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tdefaultCountry,\r\n\t\tmetadata,\r\n\t\tsetPhoneDigits,\r\n\t\tsetValueForPhoneDigits,\r\n\t\trerender,\r\n\t\tcountryMismatchDetected\r\n\t])\r\n\r\n\treturn [\r\n\t\tphoneDigits,\r\n\t\tonSetPhoneDigits\r\n\t]\r\n}\r\n\r\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {boolean} [withCountryCallingCode]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nfunction getPhoneDigitsForValue(\r\n\tvalue,\r\n\tcountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata,\r\n\tonCountryMismatch\r\n) {\r\n\tif (country && international && withCountryCallingCode) {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\tif (value) {\r\n\t\t\tif (value.indexOf(prefix) !== 0) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t\treturn prefix\r\n\t}\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tif (!country && !defaultCountry) {\r\n\t\treturn value\r\n\t}\r\n\tconst asYouType = new AsYouType(undefined, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\tif (phoneNumber) {\r\n\t\tif (country) {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\t\tonCountryMismatch(value, country, phoneNumber.country)\r\n\t\t\t} else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\tif (international) {\r\n\t\t\t\treturn phoneNumber.nationalNumber\r\n\t\t\t}\r\n\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t} else {\r\n\t\t\t// `phoneNumber.countryCallingCode` is compared here  instead of\r\n\t\t\t// `phoneNumber.country`, because, for example, a person could have\r\n\t\t\t// previously input a phone number (in \"national\" format) that isn't\r\n\t\t\t// 100% valid for the `defaultCountry`, and if `phoneNumber.country`\r\n\t\t\t// was compared, then it wouldn't match, and such phone number\r\n\t\t\t// wouldn't be formatted as a \"national\" one, and instead would be\r\n\t\t\t// formatted as an \"international\" one, confusing the user.\r\n\t\t\t// Comparing `phoneNumber.countryCallingCode` works around such issues.\r\n\t\t\t//\r\n\t\t\t// Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\r\n\t\t\t// The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\r\n\t\t\t// The user then clicks \"Save\", the page is refreshed, and the user sees\r\n\t\t\t// that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\r\n\t\t\t// the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\r\n\t\t\t// was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\r\n\t\t\t// is not a valid national number for US, and `phoneNumber.country` is compared\r\n\t\t\t// instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\r\n\t\t\t// comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\r\n\t\t\t// is no longer the case.\r\n\t\t\t//\r\n\t\t\tif (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === getCountryCallingCode(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\r\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}"],"file":"usePhoneDigits.js"}