{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode';\nexport default function CountrySelect(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      options = _ref.options,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"options\"]);\n\n  var onChange_ = useCallback(function (event) {\n    var value = event.target.value;\n    onChange(value === 'ZZ' ? undefined : value);\n  }, [onChange]);\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]); // \"ZZ\" means \"International\".\n  // (HTML requires each `<option/>` have some string `value`).\n\n  return React.createElement(\"select\", _extends({}, rest, {\n    value: value || 'ZZ',\n    onChange: onChange_\n  }), options.map(function (_ref2) {\n    var value = _ref2.value,\n        label = _ref2.label,\n        divider = _ref2.divider;\n    return React.createElement(\"option\", {\n      key: divider ? '|' : value || 'ZZ',\n      value: divider ? '|' : value || 'ZZ',\n      disabled: divider ? true : false,\n      style: divider ? DIVIDER_STYLE : undefined\n    }, label);\n  }));\n}\nCountrySelect.propTypes = {\n  /**\r\n   * A two-letter country code.\r\n   * Example: \"US\", \"RU\", etc.\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * A function of `value: string`.\r\n   * Updates the `value` property.\r\n   */\n  onChange: PropTypes.func.isRequired,\n  // `<select/>` options.\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string,\n    label: PropTypes.string,\n    divider: PropTypes.bool\n  })).isRequired\n};\nvar DIVIDER_STYLE = {\n  fontSize: '1px',\n  backgroundColor: 'currentColor',\n  color: 'inherit'\n};\nexport function CountrySelectWithIcon(_ref3) {\n  var value = _ref3.value,\n      options = _ref3.options,\n      className = _ref3.className,\n      Icon = _ref3.iconComponent,\n      getIconAspectRatio = _ref3.getIconAspectRatio,\n      Arrow = _ref3.arrowComponent,\n      unicodeFlags = _ref3.unicodeFlags,\n      rest = _objectWithoutProperties(_ref3, [\"value\", \"options\", \"className\", \"iconComponent\", \"getIconAspectRatio\", \"arrowComponent\", \"unicodeFlags\"]);\n\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]);\n  return React.createElement(\"div\", {\n    className: \"PhoneInputCountry\"\n  }, React.createElement(CountrySelect, _extends({}, rest, {\n    value: value,\n    options: options,\n    className: classNames('PhoneInputCountrySelect', className)\n  })), unicodeFlags && value && React.createElement(\"div\", {\n    className: \"PhoneInputCountryIconUnicode\"\n  }, getUnicodeFlagIcon(value)), !(unicodeFlags && value) && React.createElement(Icon, {\n    country: value,\n    label: selectedOption && selectedOption.label,\n    aspectRatio: unicodeFlags ? 1 : undefined\n  }), React.createElement(Arrow, null));\n}\nCountrySelectWithIcon.propTypes = {\n  // Country flag component.\n  iconComponent: PropTypes.elementType,\n  // Select arrow component.\n  arrowComponent: PropTypes.elementType.isRequired,\n  // Set to `true` to render Unicode flag icons instead of SVG images.\n  unicodeFlags: PropTypes.bool\n};\nCountrySelectWithIcon.defaultProps = {\n  arrowComponent: function arrowComponent() {\n    return React.createElement(\"div\", {\n      className: \"PhoneInputCountrySelectArrow\"\n    });\n  }\n};\n\nfunction getSelectedOption(options, value) {\n  for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref4 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref4 = _i.value;\n    }\n\n    var option = _ref4;\n\n    if (!option.divider && option.value === value) {\n      return option;\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["React","useCallback","useMemo","PropTypes","classNames","getUnicodeFlagIcon","CountrySelect","value","onChange","options","rest","onChange_","event","target","undefined","selectedOption","getSelectedOption","map","label","divider","key","disabled","style","DIVIDER_STYLE","propTypes","string","func","isRequired","arrayOf","shape","bool","fontSize","backgroundColor","color","CountrySelectWithIcon","className","Icon","iconComponent","getIconAspectRatio","Arrow","arrowComponent","unicodeFlags","country","aspectRatio","elementType","defaultProps","_ref4","_i","option"],"sources":["/Applications/Sandali/DietitianWebsite/client/node_modules/react-phone-number-input/source/CountrySelect.js"],"sourcesContent":["import React, { useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode'\r\n\r\nexport default function CountrySelect({\r\n\tvalue,\r\n\tonChange,\r\n\toptions,\r\n\t...rest\r\n}) {\r\n\tconst onChange_ = useCallback((event) => {\r\n\t\tconst value = event.target.value\r\n\t\tonChange(value === 'ZZ' ? undefined : value)\r\n\t}, [onChange])\r\n\r\n\tconst selectedOption = useMemo(() => {\r\n\t\treturn getSelectedOption(options, value)\r\n\t}, [options, value])\r\n\r\n\t// \"ZZ\" means \"International\".\r\n\t// (HTML requires each `<option/>` have some string `value`).\r\n\treturn (\r\n\t\t<select\r\n\t\t\t{...rest}\r\n\t\t\tvalue={value || 'ZZ'}\r\n\t\t\tonChange={onChange_}>\r\n\t\t\t{options.map(({ value, label, divider }) => (\r\n\t\t\t\t<option\r\n\t\t\t\t\tkey={divider ? '|' : value || 'ZZ'}\r\n\t\t\t\t\tvalue={divider ? '|' : value || 'ZZ'}\r\n\t\t\t\t\tdisabled={divider ? true : false}\r\n\t\t\t\t\tstyle={divider ? DIVIDER_STYLE : undefined}>\r\n\t\t\t\t\t{label}\r\n\t\t\t\t</option>\r\n\t\t\t))}\r\n\t\t</select>\r\n\t)\r\n}\r\n\r\nCountrySelect.propTypes = {\r\n\t/**\r\n\t * A two-letter country code.\r\n\t * Example: \"US\", \"RU\", etc.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string`.\r\n\t * Updates the `value` property.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// `<select/>` options.\r\n\toptions: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tvalue: PropTypes.string,\r\n\t\tlabel: PropTypes.string,\r\n\t\tdivider: PropTypes.bool\r\n\t})).isRequired\r\n}\r\n\r\nconst DIVIDER_STYLE = {\r\n\tfontSize: '1px',\r\n\tbackgroundColor: 'currentColor',\r\n\tcolor: 'inherit'\r\n}\r\n\r\nexport function CountrySelectWithIcon({\r\n\tvalue,\r\n\toptions,\r\n\tclassName,\r\n\ticonComponent: Icon,\r\n\tgetIconAspectRatio,\r\n\tarrowComponent: Arrow,\r\n\tunicodeFlags,\r\n\t...rest\r\n}) {\r\n\tconst selectedOption = useMemo(() => {\r\n\t\treturn getSelectedOption(options, value)\r\n\t}, [options, value])\r\n\r\n\treturn (\r\n\t\t<div className=\"PhoneInputCountry\">\r\n\t\t\t<CountrySelect\r\n\t\t\t\t{...rest}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\toptions={options}\r\n\t\t\t\tclassName={classNames('PhoneInputCountrySelect', className)}/>\r\n\r\n\t\t\t{/* Either a Unicode flag icon. */}\r\n\t\t\t{(unicodeFlags && value) &&\r\n\t\t\t\t<div className=\"PhoneInputCountryIconUnicode\">\r\n\t\t\t\t\t{getUnicodeFlagIcon(value)}\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\r\n\t\t\t{/* Or an SVG flag icon. */}\r\n\t\t\t{!(unicodeFlags && value) &&\r\n\t\t\t\t<Icon\r\n\t\t\t\t\tcountry={value}\r\n\t\t\t\t\tlabel={selectedOption && selectedOption.label}\r\n\t\t\t\t\taspectRatio={unicodeFlags ? 1 : undefined}/>\r\n\t\t\t}\r\n\r\n\t\t\t<Arrow/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nCountrySelectWithIcon.propTypes = {\r\n\t// Country flag component.\r\n\ticonComponent: PropTypes.elementType,\r\n\r\n\t// Select arrow component.\r\n\tarrowComponent: PropTypes.elementType.isRequired,\r\n\r\n\t// Set to `true` to render Unicode flag icons instead of SVG images.\r\n\tunicodeFlags: PropTypes.bool\r\n}\r\n\r\nCountrySelectWithIcon.defaultProps = {\r\n\tarrowComponent: () => <div className=\"PhoneInputCountrySelectArrow\"/>\r\n}\r\n\r\nfunction getSelectedOption(options, value) {\r\n\tfor (const option of options) {\r\n\t\tif (!option.divider && option.value === value) {\r\n\t\t\treturn option\r\n\t\t}\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}