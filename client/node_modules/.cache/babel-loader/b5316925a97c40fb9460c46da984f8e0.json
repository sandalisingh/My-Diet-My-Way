{"ast":null,"code":"var _jsxFileName = \"/Applications/Sandali/DietitianWebsite/client/src/Components/LoginForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { Form, Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginForm() {\n  _s();\n\n  //----------------------------------- L O G  I N -----------------------------------------\n  const [errorMessages, setErrorMessages] = useState(\"blah\");\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [isDietitian, setIsDietitian] = useState(false);\n  const database = [{\n    username: \"user1\",\n    email: \"user1@gmail.com\",\n    password: \"pass1\"\n  }, {\n    username: \"user2\",\n    email: \"user2@gmail.com\",\n    password: \"pass2\"\n  }, {\n    username: \"dietitianRashu\",\n    email: \"dt.rashumalhotra@gmail.com\",\n    password: \"Password\"\n  }];\n  const errors = {\n    uname: \"Invalid Username\",\n    email: \"Invalid Email\",\n    pass: \"Invalid Password\"\n  }; //   const errors = [\n  //     {\n  //       name : \"uname\",\n  //       message : \"Invalid Username\"\n  //   },{\n  //     name : \"email\",\n  //     message: \"Invalid Email\"\n  //   },{\n  //     name: \"pass\",\n  //     message: \"Invalid Password\"\n  //   }\n  // ];\n\n  const handleSubmit = event => {\n    //Prevent page reload\n    event.preventDefault();\n    var {\n      uname,\n      email,\n      pass\n    } = document.forms[0]; //inputs from form\n    // Find username in db\n\n    const userData = database.find(user => user.username === uname.value); // console.log(uname.value);\n    // console.log(pass.value);\n    // Compare password\n\n    if (userData) {\n      if (userData.email !== email.value) {\n        // Invalid password\n        console.log(email.value);\n        setErrorMessages({\n          name: \"email\",\n          message: errors.email\n        });\n        console.log(errorMessages.message);\n      } else if (userData.password !== pass.value) {\n        // Invalid password\n        setErrorMessages({\n          name: \"pass\",\n          message: errors.pass\n        });\n      } else {\n        //valid password and username\n        setIsSubmitted(true);\n\n        if (uname.value === \"dietitianRashu\") {\n          setIsDietitian(true);\n        }\n      }\n    } else {\n      // Username not found\n      setErrorMessages({\n        name: \"uname\",\n        message: errors.uname\n      }); // console.log(errorMessages.message);\n    }\n  }; // Error message\n\n\n  const renderErrorMessage = name => {\n    if (name === errorMessages.name) {\n      // console.log(\"i work fxn           - \" + errorMessages.message)\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Error SmFont CursiveFont\",\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: errorMessages.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    action: \"/loginUser\",\n    method: \"post\",\n    className: \"container\",\n    onSubmit: handleSubmit,\n    style: {\n      color: \"#48466D\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicName\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"InputLabel\",\n        children: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"InputFocusGreen\",\n        type: \"text\",\n        name: \"uname\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicName\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"InputLabel\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"InputFocusGreen\",\n        type: \"email\",\n        name: \"email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicEmail\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"InputLabel\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"InputFocusGreen\",\n        type: \"password\",\n        name: \"pass\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), renderErrorMessage(\"uname\"), renderErrorMessage(\"email\"), renderErrorMessage(\"pass\"), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"ButtonStyle\",\n      variant: \"primary\",\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LoginForm, \"H3ZBpgdI1srGUui0WTvq+ZMJQPI=\");\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Applications/Sandali/DietitianWebsite/client/src/Components/LoginForm.jsx"],"names":["Form","Button","LoginForm","errorMessages","setErrorMessages","useState","isSubmitted","setIsSubmitted","isDietitian","setIsDietitian","database","username","email","password","errors","uname","pass","handleSubmit","event","preventDefault","document","forms","userData","find","user","value","console","log","name","message","renderErrorMessage","color"],"mappings":"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","sourcesContent":["import { Form, Button } from \"react-bootstrap\";\n\nfunction LoginForm () {\n\n     //----------------------------------- L O G  I N -----------------------------------------\n  const [errorMessages, setErrorMessages] = useState(\"blah\");\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [isDietitian, setIsDietitian] = useState(false);\n\n  const database = [\n    {\n      username: \"user1\",\n      email: \"user1@gmail.com\",\n      password: \"pass1\"\n    },\n    {\n      username: \"user2\",\n      email : \"user2@gmail.com\",\n      password: \"pass2\"\n    },\n    {\n      username: \"dietitianRashu\",\n      email: \"dt.rashumalhotra@gmail.com\",\n      password: \"Password\"\n    }\n  ];\n\n  const errors = {\n    uname: \"Invalid Username\",\n    email: \"Invalid Email\",\n    pass: \"Invalid Password\"\n  };\n\n//   const errors = [\n//     {\n//       name : \"uname\",\n//       message : \"Invalid Username\"\n//   },{\n//     name : \"email\",\n//     message: \"Invalid Email\"\n//   },{\n//     name: \"pass\",\n//     message: \"Invalid Password\"\n//   }\n// ];\n\n  const handleSubmit = (event) => {\n    //Prevent page reload\n    event.preventDefault();\n\n    var { uname, email, pass } = document.forms[0];  //inputs from form\n\n    // Find username in db\n    const userData = database.find((user) => user.username === uname.value);\n    // console.log(uname.value);\n    // console.log(pass.value);\n\n    // Compare password\n    if (userData) {\n      if (userData.email !== email.value) {\n        // Invalid password\n        console.log(email.value);\n        setErrorMessages({ name: \"email\", message: errors.email });\n        console.log(errorMessages.message);\n      } else if (userData.password !== pass.value) {\n        // Invalid password\n        setErrorMessages({ name: \"pass\", message: errors.pass });\n      } else {\n        //valid password and username\n        setIsSubmitted(true);\n        if(uname.value === \"dietitianRashu\") {\n          setIsDietitian(true);\n        }\n      }\n    } else {\n      // Username not found\n      setErrorMessages({ name: \"uname\", message: errors.uname });\n      // console.log(errorMessages.message);\n    }\n  };\n\n  // Error message\n  const renderErrorMessage = (name) => {\n    if (name === errorMessages.name ) {\n      // console.log(\"i work fxn           - \" + errorMessages.message)\n      return (\n        <div className=\"Error SmFont CursiveFont\"><small>{errorMessages.message}</small></div>\n      );\n    }\n  }\n  \n    return (\n        <Form action=\"/loginUser\" method=\"post\" className=\"container\" onSubmit={handleSubmit} style={{color:\"#48466D\"}}>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n          <Form.Label className=\"InputLabel\">Username</Form.Label>\n          <Form.Control className=\"InputFocusGreen\" type=\"text\" name=\"uname\" required />\n          \n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n          <Form.Label className=\"InputLabel\">Email</Form.Label>\n          <Form.Control className=\"InputFocusGreen\" type=\"email\" name=\"email\" required />\n          \n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label className=\"InputLabel\">Password</Form.Label>\n          <Form.Control className=\"InputFocusGreen\" type=\"password\" name=\"pass\" required />\n          \n        </Form.Group>\n        \n        {renderErrorMessage(\"uname\")}\n        {renderErrorMessage(\"email\")}\n        {renderErrorMessage(\"pass\")}\n\n        <Button className=\"ButtonStyle\" variant=\"primary\" type=\"submit\">Submit</Button>\n\n      </Form>\n    );\n}\n\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}