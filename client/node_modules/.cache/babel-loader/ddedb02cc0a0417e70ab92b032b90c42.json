{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar PatternMatcher = /*#__PURE__*/function () {\n  function PatternMatcher(pattern) {\n    _classCallCheck(this, PatternMatcher);\n\n    this.matchTree = new PatternParser().parse(pattern);\n  }\n\n  _createClass(PatternMatcher, [{\n    key: \"match\",\n    value: function match(string) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          allowOverflow = _ref.allowOverflow;\n\n      if (!string) {\n        throw new Error('String is required');\n      }\n\n      var result = _match(string.split(''), this.matchTree, true);\n\n      if (result && result.match) {\n        delete result.matchedChars;\n      }\n\n      if (result && result.overflow) {\n        if (!allowOverflow) {\n          return;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return PatternMatcher;\n}();\n\nexport { PatternMatcher as default };\n\nfunction _match(characters, tree, last) {\n  if (typeof tree === 'string') {\n    if (last) {\n      // `tree` is always a single character.\n      if (characters.length > tree.length) {\n        return {\n          overflow: true\n        };\n      }\n    }\n\n    var characterString = characters.join('');\n\n    if (tree.indexOf(characterString) === 0) {\n      // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore else */\n      if (characters.length === tree.length) {\n        return {\n          match: true,\n          matchedChars: characters\n        };\n      } // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore next */\n\n\n      return {\n        partialMatch: true // matchedChars: characters\n\n      };\n    }\n\n    if (characterString.indexOf(tree) === 0) {\n      return {\n        match: true,\n        matchedChars: characters.slice(0, tree.length)\n      };\n    }\n\n    return;\n  }\n\n  if (Array.isArray(tree)) {\n    var restCharacters = characters.slice();\n    var i = 0;\n\n    while (i < tree.length) {\n      var subtree = tree[i];\n\n      var result = _match(restCharacters, subtree, last && i === tree.length - 1);\n\n      if (!result) {\n        return;\n      } else if (result.overflow) {\n        return result;\n      } else if (result.match) {\n        // Continue with the next subtree with the rest of the characters.\n        restCharacters = restCharacters.slice(result.matchedChars.length);\n\n        if (restCharacters.length === 0) {\n          if (i === tree.length - 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          } else {\n            return {\n              partialMatch: true // matchedChars: characters\n\n            };\n          }\n        }\n      } else {\n        /* istanbul ignore else */\n        if (result.partialMatch) {\n          return {\n            partialMatch: true // matchedChars: characters\n\n          };\n        } else {\n          throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(result, null, 2)));\n        }\n      }\n\n      i++;\n    } // If `last` then overflow has already been checked\n    // by the last element of the `tree` array.\n\n    /* istanbul ignore if */\n\n\n    if (last) {\n      return {\n        overflow: true\n      };\n    }\n\n    return {\n      match: true,\n      matchedChars: characters.slice(0, characters.length - restCharacters.length)\n    };\n  }\n\n  switch (tree.op) {\n    case '|':\n      var partialMatch;\n\n      for (var _iterator = tree.args, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref2 = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref2 = _i.value;\n        }\n\n        var branch = _ref2;\n\n        var _result = _match(characters, branch, last);\n\n        if (_result) {\n          if (_result.overflow) {\n            return _result;\n          } else if (_result.match) {\n            return {\n              match: true,\n              matchedChars: _result.matchedChars\n            };\n          } else {\n            /* istanbul ignore else */\n            if (_result.partialMatch) {\n              partialMatch = true;\n            } else {\n              throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(_result, null, 2)));\n            }\n          }\n        }\n      }\n\n      if (partialMatch) {\n        return {\n          partialMatch: true // matchedChars: ...\n\n        };\n      } // Not even a partial match.\n\n\n      return;\n\n    case '[]':\n      for (var _iterator2 = tree.args, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref3 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref3 = _i2.value;\n        }\n\n        var _char = _ref3;\n\n        if (characters[0] === _char) {\n          if (characters.length === 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          }\n\n          if (last) {\n            return {\n              overflow: true\n            };\n          }\n\n          return {\n            match: true,\n            matchedChars: [_char]\n          };\n        }\n      } // No character matches.\n\n\n      return;\n\n    /* istanbul ignore next */\n\n    default:\n      throw new Error(\"Unsupported instruction tree: \".concat(tree));\n  }\n}\n\nvar OPERATOR = new RegExp( // any of:\n'(' + // or operator\n'\\\\|' + // or\n'|' + // or group start\n'\\\\(\\\\?\\\\:' + // or\n'|' + // or group end\n'\\\\)' + // or\n'|' + // one-of set start\n'\\\\[' + // or\n'|' + // one-of set end\n'\\\\]' + ')');\nvar ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/;\n\nvar PatternParser = /*#__PURE__*/function () {\n  function PatternParser() {\n    _classCallCheck(this, PatternParser);\n  }\n\n  _createClass(PatternParser, [{\n    key: \"parse\",\n    value: function parse(pattern) {\n      this.context = [{\n        or: true,\n        instructions: []\n      }];\n      this.parsePattern(pattern);\n\n      if (this.context.length !== 1) {\n        throw new Error('Non-finalized contexts left when pattern parse ended');\n      }\n\n      var _this$context$ = this.context[0],\n          branches = _this$context$.branches,\n          instructions = _this$context$.instructions;\n\n      if (branches) {\n        return [{\n          op: '|',\n          args: branches.concat([instructions])\n        }];\n      }\n      /* istanbul ignore if */\n\n\n      if (instructions.length === 0) {\n        throw new Error('Pattern is required');\n      }\n\n      return instructions;\n    }\n  }, {\n    key: \"startContext\",\n    value: function startContext(context) {\n      this.context.push(context);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.context.pop();\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.context[this.context.length - 1];\n    }\n  }, {\n    key: \"parsePattern\",\n    value: function parsePattern(pattern) {\n      if (!pattern) {\n        throw new Error('Pattern is required');\n      }\n\n      var match = pattern.match(OPERATOR);\n\n      if (!match) {\n        if (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\n          throw new Error(\"Illegal characters found in a pattern: \".concat(pattern));\n        }\n\n        this.getContext().instructions = this.getContext().instructions.concat(pattern.split(''));\n        return;\n      }\n\n      var operator = match[1];\n      var before = pattern.slice(0, match.index);\n      var rightPart = pattern.slice(match.index + operator.length);\n\n      switch (operator) {\n        case '(?:':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            or: true,\n            instructions: [],\n            branches: []\n          });\n          break;\n\n        case ')':\n          if (!this.getContext().or) {\n            throw new Error('\")\" operator must be preceded by \"(?:\" operator');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          if (this.getContext().instructions.length === 0) {\n            throw new Error('No instructions found after \"|\" operator in an \"or\" group');\n          }\n\n          var _this$getContext = this.getContext(),\n              branches = _this$getContext.branches;\n\n          branches.push(this.getContext().instructions);\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '|',\n            args: branches\n          });\n          break;\n\n        case '|':\n          if (!this.getContext().or) {\n            throw new Error('\"|\" operator can only be used inside \"or\" groups');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          } // The top-level is an implicit \"or\" group, if required.\n\n\n          if (!this.getContext().branches) {\n            // `branches` are not defined only for the root implicit \"or\" operator.\n\n            /* istanbul ignore else */\n            if (this.context.length === 1) {\n              this.getContext().branches = [];\n            } else {\n              throw new Error('\"branches\" not found in an \"or\" group context');\n            }\n          }\n\n          this.getContext().branches.push(this.getContext().instructions);\n          this.getContext().instructions = [];\n          break;\n\n        case '[':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            oneOfSet: true\n          });\n          break;\n\n        case ']':\n          if (!this.getContext().oneOfSet) {\n            throw new Error('\"]\" operator must be preceded by \"[\" operator');\n          }\n\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '[]',\n            args: parseOneOfSet(before)\n          });\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error(\"Unknown operator: \".concat(operator));\n      }\n\n      if (rightPart) {\n        this.parsePattern(rightPart);\n      }\n    }\n  }]);\n\n  return PatternParser;\n}();\n\nfunction parseOneOfSet(pattern) {\n  var values = [];\n  var i = 0;\n\n  while (i < pattern.length) {\n    if (pattern[i] === '-') {\n      if (i === 0 || i === pattern.length - 1) {\n        throw new Error(\"Couldn't parse a one-of set pattern: \".concat(pattern));\n      }\n\n      var prevValue = pattern[i - 1].charCodeAt(0) + 1;\n      var nextValue = pattern[i + 1].charCodeAt(0) - 1;\n      var value = prevValue;\n\n      while (value <= nextValue) {\n        values.push(String.fromCharCode(value));\n        value++;\n      }\n    } else {\n      values.push(pattern[i]);\n    }\n\n    i++;\n  }\n\n  return values;\n}","map":{"version":3,"mappings":"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","names":["PatternMatcher","pattern","_classCallCheck","matchTree","PatternParser","parse","string","allowOverflow","Error","result","match","split","matchedChars","overflow","characters","tree","last","length","characterString","join","indexOf","partialMatch","slice","Array","isArray","restCharacters","i","subtree","JSON","stringify","op","args","_ref2","_i","branch","_ref3","_i2","char","OPERATOR","RegExp","ILLEGAL_CHARACTER_REGEXP","context","or","instructions","parsePattern","branches","concat","push","pop","test","getContext","operator","before","index","rightPart","startContext","endContext","oneOfSet","parseOneOfSet","values","prevValue","charCodeAt","nextValue","value","String","fromCharCode"],"sources":["/Applications/Sandali/DietitianWebsite/client/node_modules/libphonenumber-js/source/AsYouTypeFormatter.PatternMatcher.js"],"sourcesContent":["export default class PatternMatcher {\r\n\tconstructor(pattern) {\r\n\t\tthis.matchTree = new PatternParser().parse(pattern)\r\n\t}\r\n\r\n\tmatch(string, { allowOverflow } = {}) {\r\n\t\tif (!string) {\r\n\t\t\tthrow new Error('String is required')\r\n\t\t}\r\n\t\tconst result = match(string.split(''), this.matchTree, true)\r\n\t\tif (result && result.match) {\r\n\t\t\tdelete result.matchedChars\r\n\t\t}\r\n\t\tif (result && result.overflow) {\r\n\t\t\tif (!allowOverflow) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n}\r\n\r\nfunction match(characters, tree, last) {\r\n\tif (typeof tree === 'string') {\r\n\t\tif (last) {\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\tif (characters.length > tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\toverflow: true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst characterString = characters.join('')\r\n\t\tif (tree.indexOf(characterString) === 0) {\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (characters.length === tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmatch: true,\r\n\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treturn {\r\n\t\t\t\tpartialMatch: true,\r\n\t\t\t\t// matchedChars: characters\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (characterString.indexOf(tree) === 0) {\r\n\t\t\treturn {\r\n\t\t\t\tmatch: true,\r\n\t\t\t\tmatchedChars: characters.slice(0, tree.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\tif (Array.isArray(tree)) {\r\n\t\tlet restCharacters = characters.slice()\r\n\t\tlet i = 0\r\n\t\twhile (i < tree.length) {\r\n\t\t\tconst subtree = tree[i]\r\n\t\t\tconst result = match(restCharacters, subtree, last && (i === tree.length - 1))\r\n\t\t\tif (!result) {\r\n\t\t\t\treturn\r\n\t\t\t} else if (result.overflow) {\r\n\t\t\t\treturn result\r\n\t\t\t} else if (result.match) {\r\n\t\t\t\t// Continue with the next subtree with the rest of the characters.\r\n\t\t\t\trestCharacters = restCharacters.slice(result.matchedChars.length)\r\n\t\t\t\tif (restCharacters.length === 0) {\r\n\t\t\t\t\tif (i === tree.length - 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti++\r\n\t\t}\r\n\t\t// If `last` then overflow has already been checked\r\n\t\t// by the last element of the `tree` array.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (last) {\r\n\t\t\treturn {\r\n\t\t\t\toverflow: true\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tmatch: true,\r\n\t\t\tmatchedChars: characters.slice(0, characters.length - restCharacters.length)\r\n\t\t}\r\n\t}\r\n\r\n\tswitch (tree.op) {\r\n\t\tcase '|':\r\n\t\t\tlet partialMatch\r\n\t\t\tfor (const branch of tree.args) {\r\n\t\t\t\tconst result = match(characters, branch, last)\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tif (result.overflow) {\r\n\t\t\t\t\t\treturn result\r\n\t\t\t\t\t} else if (result.match) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: result.matchedChars\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\t\t\tpartialMatch = true\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (partialMatch) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t// matchedChars: ...\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Not even a partial match.\r\n\t\t\treturn\r\n\r\n\t\tcase '[]':\r\n\t\t\tfor (const char of tree.args) {\r\n\t\t\t\tif (characters[0] === char) {\r\n\t\t\t\t\tif (characters.length === 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (last) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\tmatchedChars: [char]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No character matches.\r\n\t\t\treturn\r\n\r\n\t\t/* istanbul ignore next */\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unsupported instruction tree: ${tree}`)\r\n\t}\r\n}\r\n\r\nconst OPERATOR = new RegExp(\r\n\t// any of:\r\n\t'(' +\r\n\t\t// or operator\r\n\t\t'\\\\|' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group start\r\n\t\t'\\\\(\\\\?\\\\:' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group end\r\n\t\t'\\\\)' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set start\r\n\t\t'\\\\[' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set end\r\n\t\t'\\\\]' +\r\n\t')'\r\n)\r\n\r\nconst ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/\r\n\r\nclass PatternParser {\r\n\tparse(pattern) {\r\n\t\tthis.context = [{\r\n\t\t\tor: true,\r\n\t\t\tinstructions: []\r\n\t\t}]\r\n\r\n\t\tthis.parsePattern(pattern)\r\n\r\n\t\tif (this.context.length !== 1) {\r\n\t\t\tthrow new Error('Non-finalized contexts left when pattern parse ended')\r\n\t\t}\r\n\r\n\t\tconst { branches, instructions } = this.context[0]\r\n\r\n\t\tif (branches) {\r\n\t\t\treturn [{\r\n\t\t\t\top: '|',\r\n\t\t\t\targs: branches.concat([instructions])\r\n\t\t\t}]\r\n\t\t}\r\n\r\n\t\t/* istanbul ignore if */\r\n\t\tif (instructions.length === 0) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\treturn instructions\r\n\t}\r\n\r\n\tstartContext(context) {\r\n\t\tthis.context.push(context)\r\n\t}\r\n\r\n\tendContext() {\r\n\t\tthis.context.pop()\r\n\t}\r\n\r\n\tgetContext() {\r\n\t\treturn this.context[this.context.length - 1]\r\n\t}\r\n\r\n\tparsePattern(pattern) {\r\n\t\tif (!pattern) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\tconst match = pattern.match(OPERATOR)\r\n\t\tif (!match) {\r\n\t\t\tif (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\r\n\t\t\t\tthrow new Error(`Illegal characters found in a pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tthis.getContext().instructions = this.getContext().instructions.concat(\r\n\t\t\t\tpattern.split('')\r\n\t\t\t)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst operator = match[1]\r\n\t\tconst before = pattern.slice(0, match.index)\r\n\t\tconst rightPart = pattern.slice(match.index + operator.length)\r\n\r\n\t\tswitch (operator) {\r\n\t\t\tcase '(?:':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\tor: true,\r\n\t\t\t\t\tinstructions: [],\r\n\t\t\t\t\tbranches: []\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ')':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\")\" operator must be preceded by \"(?:\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tif (this.getContext().instructions.length === 0) {\r\n\t\t\t\t\tthrow new Error('No instructions found after \"|\" operator in an \"or\" group')\r\n\t\t\t\t}\r\n\t\t\t\tconst { branches } = this.getContext()\r\n\t\t\t\tbranches.push(\r\n\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t)\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '|',\r\n\t\t\t\t\targs: branches\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '|':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\"|\" operator can only be used inside \"or\" groups')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\t// The top-level is an implicit \"or\" group, if required.\r\n\t\t\t\tif (!this.getContext().branches) {\r\n\t\t\t\t\t// `branches` are not defined only for the root implicit \"or\" operator.\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif (this.context.length === 1) {\r\n\t\t\t\t\t\tthis.getContext().branches = []\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('\"branches\" not found in an \"or\" group context')\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.getContext().branches.push(\r\n\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t)\r\n\t\t\t\tthis.getContext().instructions = []\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '[':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\toneOfSet: true\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ']':\r\n\t\t\t\tif (!this.getContext().oneOfSet) {\r\n\t\t\t\t\tthrow new Error('\"]\" operator must be preceded by \"[\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '[]',\r\n\t\t\t\t\targs: parseOneOfSet(before)\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown operator: ${operator}`)\r\n\t\t}\r\n\r\n\t\tif (rightPart) {\r\n\t\t\tthis.parsePattern(rightPart)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction parseOneOfSet(pattern) {\r\n\tconst values = []\r\n\tlet i = 0\r\n\twhile (i < pattern.length) {\r\n\t\tif (pattern[i] === '-') {\r\n\t\t\tif (i === 0 || i === pattern.length - 1) {\r\n\t\t\t\tthrow new Error(`Couldn't parse a one-of set pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tconst prevValue = pattern[i - 1].charCodeAt(0) + 1\r\n\t\t\tconst nextValue = pattern[i + 1].charCodeAt(0) - 1\r\n\t\t\tlet value = prevValue\r\n\t\t\twhile (value <= nextValue) {\r\n\t\t\t\tvalues.push(String.fromCharCode(value))\r\n\t\t\t\tvalue++\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalues.push(pattern[i])\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn values\r\n}"]},"metadata":{},"sourceType":"module"}