{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport checkNumberLength from './helpers/checkNumberLength';\nexport default function validatePhoneNumberLength() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread({}, options, {\n    extract: false // Parse phone number.\n\n  });\n\n  try {\n    var phoneNumber = parsePhoneNumber(text, options, metadata);\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(phoneNumber.countryCallingCode);\n    var result = checkNumberLength(phoneNumber.nationalNumber, metadata);\n\n    if (result !== 'IS_POSSIBLE') {\n      return result;\n    }\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {\n      return error.message;\n    } else {\n      throw error;\n    }\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,kBAAT,QAAmC,oBAAnC;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,iBAAP,MAA8B,6BAA9B;AAEA,eAAe,SAASC,yBAAT,GAAqC;AAAA,4BACjBL,kBAAkB,CAACM,SAAD,CADD;AAAA,MAC7CC,IAD6C,uBAC7CA,IAD6C;AAAA,MACvCC,OADuC,uBACvCA,OADuC;AAAA,MAC9BC,QAD8B,uBAC9BA,QAD8B;;AAEnDD,SAAO,qBACHA,OADG;AAENE,WAAO,EAAE,KAFH,CAKP;;AALO,IAAPF;;AAMA,MAAI;AACH,QAAMG,WAAW,GAAGV,gBAAgB,CAACM,IAAD,EAAOC,OAAP,EAAgBC,QAAhB,CAApC;AACAA,YAAQ,GAAG,IAAIN,QAAJ,CAAaM,QAAb,CAAXA;AACAA,YAAQ,CAACG,mBAATH,CAA6BE,WAAW,CAACE,kBAAzCJ;AACA,QAAMK,MAAM,GAAGV,iBAAiB,CAACO,WAAW,CAACI,cAAb,EAA6BN,QAA7B,CAAhC;;AACA,QAAIK,MAAM,KAAK,aAAf,EAA8B;AAC7B,aAAOA,MAAP;AACA;AAPF,IAQE,OAAOE,KAAP,EAAc;AACf;AACA,QAAIA,KAAK,YAAYd,UAArB,EAAiC;AAChC,aAAOc,KAAK,CAACC,OAAb;AADD,WAEO;AACN,YAAMD,KAAN;AACA;AACD;AACD","names":["normalizeArguments","parsePhoneNumber","ParseError","Metadata","checkNumberLength","validatePhoneNumberLength","arguments","text","options","metadata","extract","phoneNumber","selectNumberingPlan","countryCallingCode","result","nationalNumber","error","message"],"sources":["/Applications/Sandali/DietitianWebsite/client/node_modules/libphonenumber-js/source/validatePhoneNumberLength.js"],"sourcesContent":["import { normalizeArguments } from './parsePhoneNumber'\r\nimport parsePhoneNumber from './parsePhoneNumber_'\r\nimport ParseError from './ParseError'\r\nimport Metadata from './metadata'\r\nimport checkNumberLength from './helpers/checkNumberLength'\r\n\r\nexport default function validatePhoneNumberLength() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\tconst phoneNumber = parsePhoneNumber(text, options, metadata)\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(phoneNumber.countryCallingCode)\r\n\t\tconst result = checkNumberLength(phoneNumber.nationalNumber, metadata)\r\n\t\tif (result !== 'IS_POSSIBLE') {\r\n\t\t\treturn result\r\n\t\t}\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\treturn error.message\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}