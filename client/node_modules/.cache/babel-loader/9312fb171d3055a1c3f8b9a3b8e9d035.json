{"ast":null,"code":"import { isSupportedCountry } from 'libphonenumber-js/core';\nexport { getCountries } from 'libphonenumber-js/core';\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\n\nexport function sortCountryOptions(options, order) {\n  if (!order) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  for (var _iterator = order, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      (function () {\n        var countryCode = void 0;\n\n        if (element === '🌐') {\n          countryCode = undefined;\n        } else {\n          countryCode = element;\n        } // Find the position of the option.\n\n\n        var index = options.indexOf(options.filter(function (option) {\n          return option.value === countryCode;\n        })[0]); // Get the option.\n\n        var option = options[index]; // Remove the option from its default position.\n\n        options.splice(index, 1); // Add the option on top.\n\n        appendTo.push(option);\n      })();\n    }\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\nexport function getSupportedCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (option) {\n      switch (option) {\n        case '🌐':\n        case '|':\n        case '...':\n        case '…':\n          return true;\n\n        default:\n          return isCountrySupportedWithError(option, metadata);\n      }\n    });\n\n    if (countryOptions.length > 0) {\n      return countryOptions;\n    }\n  }\n}\nexport function isCountrySupportedWithError(country, metadata) {\n  if (isSupportedCountry(country, metadata)) {\n    return true;\n  } else {\n    console.error(\"Country not found: \".concat(country));\n    return false;\n  }\n}\nexport function getSupportedCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n\n  return countries;\n}","map":{"version":3,"mappings":"AAAA,SAASA,kBAAT,QAAmC,wBAAnC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA;;;;;;;;;AAQA,OAAO,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,KAArC,EAA4C;AAClD,MAAI,CAACA,KAAL,EAAY;AACX,WAAOD,OAAP;AACA;;AACD,MAAME,YAAY,GAAG,EAArB;AACA,MAAMC,eAAe,GAAG,EAAxB;AACA,MAAIC,QAAQ,GAAGF,YAAf;;AACA,uBAAsBD,KAAtB,kHAA6B;AAAA;;AAAA;AAAA;AAAAI;AAAA;AAAAC;AAAA;AAAAD;AAAA;;AAAA,QAAlBE,OAAkB;;AAC5B,QAAIA,OAAO,KAAK,GAAhB,EAAqB;AACpBH,cAAQ,CAACI,IAATJ,CAAc;AAAEK,eAAO,EAAE;AAAX,OAAdL;AADD,WAEO,IAAIG,OAAO,KAAK,KAAZA,IAAqBA,OAAO,KAAK,GAArC,EAA0C;AAChDH,cAAQ,GAAGD,eAAXC;AADM,WAEA;AAAA;AACN,YAAIM,WAAW,SAAf;;AACA,YAAIH,OAAO,KAAK,IAAhB,EAAsB;AACrBG,qBAAW,GAAGC,SAAdD;AADD,eAEO;AACNA,qBAAW,GAAGH,OAAdG;AALK,UAON;;;AACA,YAAME,KAAK,GAAGZ,OAAO,CAACa,OAARb,CAAgBA,OAAO,CAACc,MAARd,CAAe,kBAAM;AAAA,iBAAIe,MAAM,CAACC,KAAPD,KAAiBL,WAArB;AAArB,WAAuD,CAAvDV,CAAhBA,CAAd,CARM,CASN;;AACA,YAAMe,MAAM,GAAGf,OAAO,CAACY,KAAD,CAAtB,CAVM,CAWN;;AACAZ,eAAO,CAACiB,MAARjB,CAAeY,KAAfZ,EAAsB,CAAtBA,EAZM,CAaN;;AACAI,gBAAQ,CAACI,IAATJ,CAAcW,MAAdX;AAdM;AAeN;AACD;;AACD,SAAOF,YAAY,CAACgB,MAAbhB,CAAoBF,OAApBE,EAA6BgB,MAA7BhB,CAAoCC,eAApCD,CAAP;AACA;AAED,OAAO,SAASiB,0BAAT,CAAoCC,cAApC,EAAoDC,QAApD,EAA8D;AACpE,MAAID,cAAJ,EAAoB;AACnBA,kBAAc,GAAGA,cAAc,CAACN,MAAfM,CAAsB,UAACL,MAAD,EAAY;AAClD,cAAQA,MAAR;AACC,aAAK,IAAL;AACA,aAAK,GAAL;AACA,aAAK,KAAL;AACA,aAAK,GAAL;AACC,iBAAO,IAAP;;AACD;AACC,iBAAOO,2BAA2B,CAACP,MAAD,EAASM,QAAT,CAAlC;AAPF;AADgB,MAAjBD;;AAWA,QAAIA,cAAc,CAACG,MAAfH,GAAwB,CAA5B,EAA+B;AAC9B,aAAOA,cAAP;AACA;AACD;AACD;AAED,OAAO,SAASE,2BAAT,CAAqCE,OAArC,EAA8CH,QAA9C,EAAwD;AAC9D,MAAIxB,kBAAkB,CAAC2B,OAAD,EAAUH,QAAV,CAAtB,EAA2C;AAC1C,WAAO,IAAP;AADD,SAEO;AACNI,WAAO,CAACC,KAARD,8BAAoCD,OAApC;AACA,WAAO,KAAP;AACA;AACD;AAED,OAAO,SAASG,qBAAT,CAA+BC,SAA/B,EAA0CP,QAA1C,EAAoD;AAC1D,MAAIO,SAAJ,EAAe;AACdA,aAAS,GAAGA,SAAS,CAACd,MAAVc,CAAiB,mBAAO;AAAA,aAAIN,2BAA2B,CAACE,OAAD,EAAUH,QAAV,CAA/B;AAAxB,MAAZO;;AACA,QAAIA,SAAS,CAACL,MAAVK,KAAqB,CAAzB,EAA4B;AAC3BA,eAAS,GAAGjB,SAAZiB;AACA;AACD;;AACD,SAAOA,SAAP;AACA","names":["isSupportedCountry","getCountries","sortCountryOptions","options","order","optionsOnTop","optionsOnBottom","appendTo","_ref","_i","element","push","divider","countryCode","undefined","index","indexOf","filter","option","value","splice","concat","getSupportedCountryOptions","countryOptions","metadata","isCountrySupportedWithError","length","country","console","error","getSupportedCountries","countries"],"sources":["/Applications/Sandali/DietitianWebsite/client/node_modules/react-phone-number-input/source/helpers/countries.js"],"sourcesContent":["import { isSupportedCountry } from 'libphonenumber-js/core'\r\nexport { getCountries } from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\r\nexport function sortCountryOptions(options, order) {\r\n\tif (!order) {\r\n\t\treturn options\r\n\t}\r\n\tconst optionsOnTop = []\r\n\tconst optionsOnBottom = []\r\n\tlet appendTo = optionsOnTop\r\n\tfor (const element of order) {\r\n\t\tif (element === '|') {\r\n\t\t\tappendTo.push({ divider: true })\r\n\t\t} else if (element === '...' || element === '…') {\r\n\t\t\tappendTo = optionsOnBottom\r\n\t\t} else {\r\n\t\t\tlet countryCode\r\n\t\t\tif (element === '🌐') {\r\n\t\t\t\tcountryCode = undefined\r\n\t\t\t} else {\r\n\t\t\t\tcountryCode = element\r\n\t\t\t}\r\n\t\t\t// Find the position of the option.\r\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === countryCode)[0])\r\n\t\t\t// Get the option.\r\n\t\t\tconst option = options[index]\r\n\t\t\t// Remove the option from its default position.\r\n\t\t\toptions.splice(index, 1)\r\n\t\t\t// Add the option on top.\r\n\t\t\tappendTo.push(option)\r\n\t\t}\r\n\t}\r\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\r\n}\r\n\r\nexport function getSupportedCountryOptions(countryOptions, metadata) {\r\n\tif (countryOptions) {\r\n\t\tcountryOptions = countryOptions.filter((option) => {\r\n\t\t\tswitch (option) {\r\n\t\t\t\tcase '🌐':\r\n\t\t\t\tcase '|':\r\n\t\t\t\tcase '...':\r\n\t\t\t\tcase '…':\r\n\t\t\t\t\treturn true\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn isCountrySupportedWithError(option, metadata)\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (countryOptions.length > 0) {\r\n\t\t\treturn countryOptions\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isCountrySupportedWithError(country, metadata) {\r\n\tif (isSupportedCountry(country, metadata)) {\r\n\t\treturn true\r\n\t} else {\r\n\t\tconsole.error(`Country not found: ${country}`)\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nexport function getSupportedCountries(countries, metadata) {\r\n\tif (countries) {\r\n\t\tcountries = countries.filter(country => isCountrySupportedWithError(country, metadata))\r\n\t\tif (countries.length === 0) {\r\n\t\t\tcountries = undefined\r\n\t\t}\r\n\t}\r\n\treturn countries\r\n}"]},"metadata":{},"sourceType":"module"}