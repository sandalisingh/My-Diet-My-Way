{"ast":null,"code":"import isValidNumber from '../validate_';\nimport parseDigits from '../helpers/parseDigits';\nimport { startsWith, endsWith } from './util';\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\n\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    } // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n\n\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        } // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n\n      } else if (parseDigits(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n\n  if (metadata == null) {\n    return true;\n  } // Check if a national prefix should be present when formatting this number.\n\n\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber); // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    } // Normalize the remainder.\n\n\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput()); // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  } // Now look for a second one.\n\n\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  } // If the first slash is after the country calling code, this is permitted.\n\n\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  var normalizedCandidate = normalizeDigits(candidate, true\n  /* keep non-digits */\n  );\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  } // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n\n\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n\n  if (alternateFormats) {\n    for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var alternateFormat = _ref;\n\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\n\n\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  } // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n\n\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata); // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n\n  var endIndex = rfc3966Format.indexOf(';');\n\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  } // The country-code will have a '-' following it.\n\n\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN); // Set this to the last group, skipping it if the number has an extension.\n\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1; // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  } // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n\n\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  } // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n\n\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  } // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n\n\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n\n    if (fromIndex < 0) {\n      return false;\n    } // Moves {@code fromIndex} forward.\n\n\n    fromIndex += formattedNumberGroups[i].length();\n\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  } // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n\n\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}","map":{"version":3,"mappings":"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","names":["isValidNumber","parseDigits","startsWith","endsWith","POSSIBLE","number","candidate","metadata","VALID","undefined","containsOnlyValidXChars","toString","STRICT_GROUPING","regExpCache","candidateString","containsMoreThanOneSlashInNationalNumber","isNationalPrefixPresentIfRequired","checkNumberGroupingIsValid","allNumberGroupsRemainGrouped","EXACT_GROUPING","allNumberGroupsAreExactlyPresent","index","length","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","substring","MatchType","NSN_MATCH","ext","_metadata","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","nationalNumber","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","indexOf","secondSlashInBodyIndex","candidateHasCountryCode","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","slice","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","nationalSignificantNumber","_ref","_i","alternateFormat","leadingDigitsPatterns","leadingDigitsRegExp","getPatternForRegExp","test","formattingPattern","formatNsnUsingPattern","split","rfc3966Format","formatNumber","endIndex","startIndex","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","fromIndex","FROM_DEFAULT_COUNTRY","countryCode","i","region","getNddPrefixForRegion","Character","isDigit","getExtension"],"sources":["/Applications/Sandali/DietitianWebsite/client/node_modules/libphonenumber-js/source/findNumbers/Leniency.js"],"sourcesContent":["import isValidNumber from '../validate_'\r\nimport parseDigits from '../helpers/parseDigits'\r\n\r\nimport {\r\n\tstartsWith,\r\n\tendsWith\r\n} from './util'\r\n\r\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\r\nexport default\r\n{\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n\t */\r\n\tPOSSIBLE(number, candidate, metadata)\r\n\t{\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\" and \"valid\".\r\n\t * Numbers written in national format must have their national-prefix\r\n\t * present if it is usually written for a number of this type.\r\n\t */\r\n\tVALID(number, candidate, metadata)\r\n\t{\r\n\t\tif (!isValidNumber(number, undefined, metadata) ||\r\n\t\t\t!containsOnlyValidXChars(number, candidate.toString(), metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n    // Skipped for simplicity.\r\n\t\t// return isNationalPrefixPresentIfRequired(number, metadata)\r\n    return true\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and\r\n\t * are grouped in a possible way for this locale. For example, a US number written as\r\n\t * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol in the national significant number\r\n\t * are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use,\r\n\t * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tSTRICT_GROUPING(number, candidate, metadata, regExpCache)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, undefined, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsRemainGrouped,\r\n\t\t\tregExpCache\r\n\t\t)\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n\t * are grouped in the same way that we would have formatted it, or as a single block. For\r\n\t * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol are also dropped at this level.\r\n\t * <p>\r\n\t * Warning: This level might result in lower coverage especially for regions outside of country\r\n\t * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n\t * libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tEXACT_GROUPING(number, candidate, metadata, regExpCache)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, undefined, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsAreExactlyPresent,\r\n\t\t\tregExpCache\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction containsOnlyValidXChars(number, candidate, metadata)\r\n{\r\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\r\n  // national significant number or (2) an extension sign, in which case they always precede the\r\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\r\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\r\n  // or 'X'. We ignore the character if it appears as the last character of the string.\r\n  for (let index = 0; index < candidate.length - 1; index++)\r\n  {\r\n    const charAtIndex = candidate.charAt(index)\r\n\r\n    if (charAtIndex === 'x' || charAtIndex === 'X')\r\n    {\r\n      const charAtNextIndex = candidate.charAt(index + 1)\r\n\r\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X')\r\n      {\r\n        // This is the carrier code case, in which the 'X's always precede the national\r\n        // significant number.\r\n        index++\r\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH)\r\n        {\r\n          return false\r\n        }\r\n\t      // This is the extension sign case, in which the 'x' or 'X' should always precede the\r\n\t      // extension number.\r\n      }\r\n      else if (parseDigits(candidate.substring(index)) !== number.ext)\r\n      {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction isNationalPrefixPresentIfRequired(number, _metadata)\r\n{\r\n  // First, check how we deduced the country code. If it was written in international format, then\r\n  // the national prefix is not required.\r\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY')\r\n  {\r\n    return true\r\n  }\r\n\r\n  const phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n\r\n  const metadata = util.getMetadataForRegion(phoneNumberRegion)\r\n  if (metadata == null)\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Check if a national prefix should be present when formatting this number.\r\n  const nationalNumber = util.getNationalSignificantNumber(number)\r\n  const formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber)\r\n\r\n  // To do this, we check that a national prefix formatting rule was present\r\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\r\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0)\r\n  {\r\n    if (formatRule.getNationalPrefixOptionalWhenFormatting())\r\n    {\r\n      // The national-prefix is optional in these cases, so we don't need to check if it was\r\n      // present.\r\n      return true\r\n    }\r\n\r\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(\r\n        formatRule.getNationalPrefixFormattingRule()))\r\n    {\r\n      // National Prefix not needed for this number.\r\n      return true\r\n    }\r\n\r\n    // Normalize the remainder.\r\n    const rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput())\r\n\r\n    // Check if we found a national prefix and/or carrier code at the start of the raw input, and\r\n    // return the result.\r\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null)\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate)\r\n{\r\n  const firstSlashInBodyIndex = candidate.indexOf('/')\r\n  if (firstSlashInBodyIndex < 0)\r\n  {\r\n    // No slashes, this is okay.\r\n    return false\r\n  }\r\n\r\n  // Now look for a second one.\r\n  const secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1)\r\n  if (secondSlashInBodyIndex < 0)\r\n  {\r\n    // Only one slash, this is okay.\r\n    return false\r\n  }\r\n\r\n  // If the first slash is after the country calling code, this is permitted.\r\n  const candidateHasCountryCode =\r\n      (number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN\r\n       || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN)\r\n\r\n  if (candidateHasCountryCode\r\n      && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex))\r\n          === String(number.getCountryCode()))\r\n  {\r\n    // Any more slashes and this is illegal.\r\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction checkNumberGroupingIsValid(\r\n  number,\r\n  candidate,\r\n  metadata,\r\n  checkGroups,\r\n  regExpCache\r\n) {\r\n  const normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */)\r\n  let formattedNumberGroups = getNationalNumberGroups(metadata, number, null)\r\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n    return true\r\n  }\r\n\r\n  // If this didn't pass, see if there are any alternate formats that match, and try them instead.\r\n  const alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode())\r\n  const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\r\n  if (alternateFormats) {\r\n    for (const alternateFormat of alternateFormats.numberFormats()) {\r\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\r\n        // There is only one leading digits pattern for alternate formats.\r\n        const leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0])\r\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\r\n          // Leading digits don't match; try another one.\r\n          continue\r\n        }\r\n      }\r\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat)\r\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\r\nfunction getNationalNumberGroups(\r\n\tmetadata,\r\n\tnumber,\r\n\tformattingPattern\r\n) {\r\n  if (formattingPattern) {\r\n    // We format the NSN only, and split that according to the separator.\r\n    const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n    return util.formatNsnUsingPattern(nationalSignificantNumber,\r\n                                      formattingPattern, 'RFC3966', metadata).split('-')\r\n\t}\r\n\r\n  // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\r\n  const rfc3966Format = formatNumber(number, 'RFC3966', metadata)\r\n\r\n  // We remove the extension part from the formatted string before splitting it into different\r\n  // groups.\r\n  let endIndex = rfc3966Format.indexOf(';')\r\n  if (endIndex < 0) {\r\n    endIndex = rfc3966Format.length\r\n  }\r\n\r\n  // The country-code will have a '-' following it.\r\n  const startIndex = rfc3966Format.indexOf('-') + 1\r\n  return rfc3966Format.slice(startIndex, endIndex).split('-')\r\n}\r\n\r\nfunction allNumberGroupsAreExactlyPresent\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  const candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN)\r\n\r\n  // Set this to the last group, skipping it if the number has an extension.\r\n  let candidateNumberGroupIndex =\r\n      number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1\r\n\r\n  // First we check if the national significant number is formatted as a block.\r\n  // We use contains and not equals, since the national significant number may be present with\r\n  // a prefix such as a national number prefix, or the country code itself.\r\n  if (candidateGroups.length == 1\r\n      || candidateGroups[candidateNumberGroupIndex].contains(\r\n          util.getNationalSignificantNumber(number)))\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Starting from the end, go through in reverse, excluding the first group, and check the\r\n  // candidate and number groups are the same.\r\n  let formattedNumberGroupIndex = (formattedNumberGroups.length - 1)\r\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0)\r\n  {\r\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex])\r\n    {\r\n      return false\r\n    }\r\n    formattedNumberGroupIndex--\r\n    candidateNumberGroupIndex--\r\n  }\r\n\r\n  // Now check the first group. There may be a national prefix at the start, so we only check\r\n  // that the candidate group ends with the formatted number group.\r\n  return (candidateNumberGroupIndex >= 0\r\n      && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]))\r\n}\r\n\r\n\r\nfunction allNumberGroupsRemainGrouped\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  let fromIndex = 0\r\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY)\r\n  {\r\n    // First skip the country code if the normalized candidate contained it.\r\n    const countryCode = String(number.getCountryCode())\r\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length()\r\n  }\r\n\r\n  // Check each group of consecutive digits are not broken into separate groupings in the\r\n  // {@code normalizedCandidate} string.\r\n  for (let i = 0; i < formattedNumberGroups.length; i++)\r\n  {\r\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\r\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\r\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex)\r\n    if (fromIndex < 0) {\r\n      return false\r\n    }\r\n    // Moves {@code fromIndex} forward.\r\n    fromIndex += formattedNumberGroups[i].length()\r\n    if (i == 0 && fromIndex < normalizedCandidate.length())\r\n    {\r\n      // We are at the position right after the NDC. We get the region used for formatting\r\n      // information based on the country code in the phone number, rather than the number itself,\r\n      // as we do not need to distinguish between different countries with the same country\r\n      // calling code and this is faster.\r\n      const region = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n      if (util.getNddPrefixForRegion(region, true) != null\r\n          && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\r\n        // This means there is no formatting symbol after the NDC. In this case, we only\r\n        // accept the number if there is no formatting symbol at all in the number, except\r\n        // for extensions. This is only important for countries with national prefixes.\r\n        const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n        return startsWith\r\n        (\r\n      \t  normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length),\r\n           nationalSignificantNumber\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  // The check here makes sure that we haven't mistakenly already used the extension to\r\n  // match the last group of the subscriber number. Note the extension cannot have\r\n  // formatting in-between digits.\r\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension())\r\n}"]},"metadata":{},"sourceType":"module"}