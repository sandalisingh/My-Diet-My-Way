{"ast":null,"code":"function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\n\n\nvar Node = function Node(key, value) {\n  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  _classCallCheck(this, Node);\n\n  this.key = key;\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n};\n\nvar LRUCache = /*#__PURE__*/function () {\n  //set default limit of 10 if limit is not passed.\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n    _classCallCheck(this, LRUCache);\n\n    this.size = 0;\n    this.limit = limit;\n    this.head = null;\n    this.tail = null;\n    this.cache = {};\n  } // Write Node to head of LinkedList\n  // update cache with Node key and Node reference\n\n\n  _createClass(LRUCache, [{\n    key: \"put\",\n    value: function put(key, value) {\n      this.ensureLimit();\n\n      if (!this.head) {\n        this.head = this.tail = new Node(key, value);\n      } else {\n        var node = new Node(key, value, this.head);\n        this.head.prev = node;\n        this.head = node;\n      } //Update the cache map\n\n\n      this.cache[key] = this.head;\n      this.size++;\n    } // Read from cache map and make that node as new Head of LinkedList\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (this.cache[key]) {\n        var value = this.cache[key].value; // node removed from it's position and cache\n\n        this.remove(key); // write node again to the head of LinkedList to make it most recently used\n\n        this.put(key, value);\n        return value;\n      }\n\n      console.log(\"Item not available in cache for key \".concat(key));\n    }\n  }, {\n    key: \"ensureLimit\",\n    value: function ensureLimit() {\n      if (this.size === this.limit) {\n        this.remove(this.tail.key);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var node = this.cache[key];\n\n      if (node.prev !== null) {\n        node.prev.next = node.next;\n      } else {\n        this.head = node.next;\n      }\n\n      if (node.next !== null) {\n        node.next.prev = node.prev;\n      } else {\n        this.tail = node.prev;\n      }\n\n      delete this.cache[key];\n      this.size--;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = null;\n      this.tail = null;\n      this.size = 0;\n      this.cache = {};\n    } // // Invokes the callback function with every node of the chain and the index of the node.\n    // forEach(fn) {\n    //   let node = this.head;\n    //   let counter = 0;\n    //   while (node) {\n    //     fn(node, counter);\n    //     node = node.next;\n    //     counter++;\n    //   }\n    // }\n    // // To iterate over LRU with a 'for...of' loop\n    // *[Symbol.iterator]() {\n    //   let node = this.head;\n    //   while (node) {\n    //     yield node;\n    //     node = node.next;\n    //   }\n    // }\n\n  }]);\n\n  return LRUCache;\n}();\n\nexport { LRUCache as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;EAAA;;;IAEMA,I,GACJ,cAAYC,GAAZ,EAAiBC,KAAjB,EAAkD;AAAA,MAA1BC,IAA0B,uEAAnB,IAAmB;AAAA,MAAbC,IAAa,uEAAN,IAAM;;AAAAC;;AAChD,OAAKJ,GAAL,GAAWA,GAAX;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,IAAL,GAAYA,IAAZ;;;IAIiBE,Q;AACnB;AACA,sBAAwB;AAAA,QAAZC,KAAY,uEAAJ,EAAI;;AAAAF;;AACtB,SAAKG,IAAL,GAAY,CAAZ;AACA,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKE,IAAL,GAAY,IAAZ;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;IAGF;AACA;;;;;wBACIV,KAAKC,OAAM;AACb,WAAKU,WAAL;;AAEA,UAAG,CAAC,KAAKH,IAAT,EAAc;AACZ,aAAKA,IAAL,GAAY,KAAKC,IAAL,GAAY,IAAIV,IAAJ,CAASC,GAAT,EAAcC,KAAd,CAAxB;AADF,aAEK;AACH,YAAMW,IAAI,GAAG,IAAIb,IAAJ,CAASC,GAAT,EAAcC,KAAd,EAAqB,KAAKO,IAA1B,CAAb;AACA,aAAKA,IAAL,CAAUL,IAAV,GAAiBS,IAAjB;AACA,aAAKJ,IAAL,GAAYI,IAAZ;AARW,QAWb;;;AACA,WAAKF,KAAL,CAAWV,GAAX,IAAkB,KAAKQ,IAAvB;AACA,WAAKD,IAAL;MAGF;;;;wBACIP,KAAI;AACN,UAAG,KAAKU,KAAL,CAAWV,GAAX,CAAH,EAAmB;AACjB,YAAMC,KAAK,GAAG,KAAKS,KAAL,CAAWV,GAAX,EAAgBC,KAA9B,CADiB,CAGjB;;AACA,aAAKY,MAAL,CAAYb,GAAZ,EAJiB,CAKjB;;AACA,aAAKc,GAAL,CAASd,GAAT,EAAcC,KAAd;AAEA,eAAOA,KAAP;AACD;;AAEDc,aAAO,CAACC,GAARD,+CAAmDf,GAAnD;AACD;;;kCAEY;AACX,UAAG,KAAKO,IAAL,KAAc,KAAKD,KAAtB,EAA4B;AAC1B,aAAKO,MAAL,CAAY,KAAKJ,IAAL,CAAUT,GAAtB;AACD;AACF;;;2BAEMA,KAAI;AACT,UAAMY,IAAI,GAAG,KAAKF,KAAL,CAAWV,GAAX,CAAb;;AAEA,UAAGY,IAAI,CAACT,IAALS,KAAc,IAAjB,EAAsB;AACpBA,YAAI,CAACT,IAALS,CAAUV,IAAVU,GAAiBA,IAAI,CAACV,IAAtBU;AADF,aAEK;AACH,aAAKJ,IAAL,GAAYI,IAAI,CAACV,IAAjB;AACD;;AAED,UAAGU,IAAI,CAACV,IAALU,KAAc,IAAjB,EAAsB;AACpBA,YAAI,CAACV,IAALU,CAAUT,IAAVS,GAAiBA,IAAI,CAACT,IAAtBS;AADF,aAEK;AACH,aAAKH,IAAL,GAAYG,IAAI,CAACT,IAAjB;AACD;;AAED,aAAO,KAAKO,KAAL,CAAWV,GAAX,CAAP;AACA,WAAKO,IAAL;AACD;;;4BAEO;AACN,WAAKC,IAAL,GAAY,IAAZ;AACA,WAAKC,IAAL,GAAY,IAAZ;AACA,WAAKF,IAAL,GAAY,CAAZ;AACA,WAAKG,KAAL,GAAa,EAAb;MAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;SA9FmBL,Q","names":["Node","key","value","next","prev","_classCallCheck","LRUCache","limit","size","head","tail","cache","ensureLimit","node","remove","put","console","log"],"sources":["/Applications/Sandali/DietitianWebsite/client/node_modules/libphonenumber-js/source/findNumbers/LRUCache.js"],"sourcesContent":["// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\r\n\r\nclass Node {\r\n  constructor(key, value, next = null, prev = null) {\r\n    this.key = key;\r\n    this.value = value;\r\n    this.next = next;\r\n    this.prev = prev;\r\n  }\r\n}\r\n\r\nexport default class LRUCache {\r\n  //set default limit of 10 if limit is not passed.\r\n  constructor(limit = 10) {\r\n    this.size = 0;\r\n    this.limit = limit;\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.cache = {};\r\n  }\r\n\r\n  // Write Node to head of LinkedList\r\n  // update cache with Node key and Node reference\r\n  put(key, value){\r\n    this.ensureLimit();\r\n\r\n    if(!this.head){\r\n      this.head = this.tail = new Node(key, value);\r\n    }else{\r\n      const node = new Node(key, value, this.head);\r\n      this.head.prev = node;\r\n      this.head = node;\r\n    }\r\n\r\n    //Update the cache map\r\n    this.cache[key] = this.head;\r\n    this.size++;\r\n  }\r\n\r\n  // Read from cache map and make that node as new Head of LinkedList\r\n  get(key){\r\n    if(this.cache[key]){\r\n      const value = this.cache[key].value;\r\n\r\n      // node removed from it's position and cache\r\n      this.remove(key)\r\n      // write node again to the head of LinkedList to make it most recently used\r\n      this.put(key, value);\r\n\r\n      return value;\r\n    }\r\n\r\n    console.log(`Item not available in cache for key ${key}`);\r\n  }\r\n\r\n  ensureLimit(){\r\n    if(this.size === this.limit){\r\n      this.remove(this.tail.key)\r\n    }\r\n  }\r\n\r\n  remove(key){\r\n    const node = this.cache[key];\r\n\r\n    if(node.prev !== null){\r\n      node.prev.next = node.next;\r\n    }else{\r\n      this.head = node.next;\r\n    }\r\n\r\n    if(node.next !== null){\r\n      node.next.prev = node.prev;\r\n    }else{\r\n      this.tail = node.prev\r\n    }\r\n\r\n    delete this.cache[key];\r\n    this.size--;\r\n  }\r\n\r\n  clear() {\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.size = 0;\r\n    this.cache = {};\r\n  }\r\n\r\n  // // Invokes the callback function with every node of the chain and the index of the node.\r\n  // forEach(fn) {\r\n  //   let node = this.head;\r\n  //   let counter = 0;\r\n  //   while (node) {\r\n  //     fn(node, counter);\r\n  //     node = node.next;\r\n  //     counter++;\r\n  //   }\r\n  // }\r\n\r\n  // // To iterate over LRU with a 'for...of' loop\r\n  // *[Symbol.iterator]() {\r\n  //   let node = this.head;\r\n  //   while (node) {\r\n  //     yield node;\r\n  //     node = node.next;\r\n  //   }\r\n  // }\r\n}"]},"metadata":{},"sourceType":"module"}