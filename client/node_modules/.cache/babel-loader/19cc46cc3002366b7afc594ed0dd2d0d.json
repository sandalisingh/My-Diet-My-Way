{"ast":null,"code":"var _jsxFileName = \"/Applications/Sandali/DietitianWebsite/client/src/Components/LoginForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { Form, Button } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginForm(props) {\n  _s();\n\n  //----------------------------------- L O G  I N -----------------------------------------\n  //   const [errorMessages, setErrorMessages] = useState(props.ErrorMessage);\n  //   const database = [\n  //     {\n  //       username: \"user1\",\n  //       email: \"user1@gmail.com\",\n  //       password: \"pass1\"\n  //     },\n  //     {\n  //       username: \"user2\",\n  //       email : \"user2@gmail.com\",\n  //       password: \"pass2\"\n  //     },\n  //     {\n  //       username: \"dietitianRashu\",\n  //       email: \"dt.rashumalhotra@gmail.com\",\n  //       password: \"Password\"\n  //     }\n  //   ];\n  //   const errors = {\n  //     uname: \"Invalid Username\",\n  //     email: \"Invalid Email\",\n  //     pass: \"Invalid Password\"\n  //   };\n  //   const handleSubmit = (event) => {\n  //     //Prevent page reload\n  //     event.preventDefault();\n  //     var { uname, email, pass } = document.forms[0];  //inputs from form\n  //     // Find username in db\n  //     const userData = database.find((user) => user.username === uname.value);\n  //     // console.log(uname.value);\n  //     // console.log(pass.value);\n  //     // Compare password\n  //     if (userData) {\n  //       if (userData.email !== email.value) {\n  //         // Invalid password\n  //         console.log(email.value);\n  //         setErrorMessages({ name: \"email\", message: errors.email });\n  //         console.log(errorMessages.message);\n  //       } else if (userData.password !== pass.value) {\n  //         // Invalid password\n  //         setErrorMessages({ name: \"pass\", message: errors.pass });\n  //       } else {\n  //         //valid password and username\n  //         setIsSubmitted(true);\n  //         if(uname.value === \"dietitianRashu\") {\n  //           setIsDietitian(true);\n  //         }\n  //       }\n  //     } else {\n  //       // Username not found\n  //       setErrorMessages({ name: \"uname\", message: errors.uname });\n  //       // console.log(errorMessages.message);\n  //     }\n  //   };\n  // Error message\n  const [isError, setError] = useState(props.isError);\n\n  const getError = () => {}; //Runs on the first render\n  //And any time any dependency value changes\n\n\n  useEffect(() => renderErrorMessage(), []);\n\n  const renderErrorMessage = () => {\n    if (props.isError) {\n      // console.log(\"i work fxn           - \" + errorMessages.message)\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Error SmFont CursiveFont\",\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: props.ErrorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    action: \"/loginUser\",\n    method: \"post\",\n    className: \"container\",\n    style: {\n      color: \"#48466D\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicName\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"InputLabel\",\n        children: \"Username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"InputFocusGreen\",\n        type: \"text\",\n        name: \"uname\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicName\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"InputLabel\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"InputFocusGreen\",\n        type: \"email\",\n        name: \"email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"formBasicEmail\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"InputLabel\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"InputFocusGreen\",\n        type: \"password\",\n        name: \"pass\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), renderErrorMessage(\"uname\"), renderErrorMessage(\"email\"), renderErrorMessage(\"pass\"), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"ButtonStyle\",\n      variant: \"primary\",\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LoginForm, \"fgv0fZEwVQaFEHlVpeamEaCqqPU=\");\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Applications/Sandali/DietitianWebsite/client/src/Components/LoginForm.jsx"],"names":["Form","Button","React","useState","LoginForm","props","isError","setError","getError","useEffect","renderErrorMessage","ErrorMessage","color"],"mappings":"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","sourcesContent":["import { Form, Button } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\n\nfunction LoginForm (props) {\n\n     //----------------------------------- L O G  I N -----------------------------------------\n//   const [errorMessages, setErrorMessages] = useState(props.ErrorMessage);\n\n//   const database = [\n//     {\n//       username: \"user1\",\n//       email: \"user1@gmail.com\",\n//       password: \"pass1\"\n//     },\n//     {\n//       username: \"user2\",\n//       email : \"user2@gmail.com\",\n//       password: \"pass2\"\n//     },\n//     {\n//       username: \"dietitianRashu\",\n//       email: \"dt.rashumalhotra@gmail.com\",\n//       password: \"Password\"\n//     }\n//   ];\n\n//   const errors = {\n//     uname: \"Invalid Username\",\n//     email: \"Invalid Email\",\n//     pass: \"Invalid Password\"\n//   };\n\n//   const handleSubmit = (event) => {\n//     //Prevent page reload\n//     event.preventDefault();\n\n//     var { uname, email, pass } = document.forms[0];  //inputs from form\n\n//     // Find username in db\n//     const userData = database.find((user) => user.username === uname.value);\n//     // console.log(uname.value);\n//     // console.log(pass.value);\n\n//     // Compare password\n//     if (userData) {\n//       if (userData.email !== email.value) {\n//         // Invalid password\n//         console.log(email.value);\n//         setErrorMessages({ name: \"email\", message: errors.email });\n//         console.log(errorMessages.message);\n//       } else if (userData.password !== pass.value) {\n//         // Invalid password\n//         setErrorMessages({ name: \"pass\", message: errors.pass });\n//       } else {\n//         //valid password and username\n//         setIsSubmitted(true);\n//         if(uname.value === \"dietitianRashu\") {\n//           setIsDietitian(true);\n//         }\n//       }\n//     } else {\n//       // Username not found\n//       setErrorMessages({ name: \"uname\", message: errors.uname });\n//       // console.log(errorMessages.message);\n//     }\n//   };\n\n  // Error message\n  \n  const [ isError, setError] = useState(props.isError);\n    \n  const getError = () => {\n      \n  }\n\n  //Runs on the first render\n  //And any time any dependency value changes\n  useEffect( () => renderErrorMessage(), [] );\n  \n  const renderErrorMessage = () => {\n    if (props.isError ) {\n      // console.log(\"i work fxn           - \" + errorMessages.message)\n      return (\n        <div className=\"Error SmFont CursiveFont\"><small>{props.ErrorMessage}</small></div>\n      );\n    }\n  }\n\n    return (\n        <Form action=\"/loginUser\" method=\"post\" className=\"container\" style={{color:\"#48466D\"}}>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n          <Form.Label className=\"InputLabel\">Username</Form.Label>\n          <Form.Control className=\"InputFocusGreen\" type=\"text\" name=\"uname\" required />\n          \n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n          <Form.Label className=\"InputLabel\">Email</Form.Label>\n          <Form.Control className=\"InputFocusGreen\" type=\"email\" name=\"email\" required />\n          \n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label className=\"InputLabel\">Password</Form.Label>\n          <Form.Control className=\"InputFocusGreen\" type=\"password\" name=\"pass\" required />\n          \n        </Form.Group>\n        \n        {renderErrorMessage(\"uname\")}\n        {renderErrorMessage(\"email\")}\n        {renderErrorMessage(\"pass\")}\n\n        <Button className=\"ButtonStyle\" variant=\"primary\" type=\"submit\">Submit</Button>\n\n      </Form>\n    );\n}\n\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}