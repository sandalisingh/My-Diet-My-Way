{"ast":null,"code":"var _jsxFileName = \"/Applications/Sandali/DietitianWebsite/client/src/pages/Login.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport LineTitle from \"../Components/LineTitle\";\nimport LoginForm from \"../Components/LoginForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Login() {\n  _s();\n\n  const [data, setData] = useState([]);\n  let LoggedInStatement = null;\n  let isSuccessfullyLoggedIn = false,\n      ErrorMessage = null;\n  let isError = false,\n      LoggedInUser = null;\n\n  const getData = () => {\n    let url = 'http://localhost:3001/loginUser'; //URL of the resource we want to fetch\n\n    fetch(url).then(response => response.json()).then(receivedData => setData(receivedData));\n    isSuccessfullyLoggedIn = receivedData.isSuccessfullyLoggedIn;\n\n    if (isSuccessfullyLoggedIn === false && receivedData.isError === true) {\n      ErrorMessage = receivedData.ErrorMessage;\n      isError = receivedData.isError;\n    } else if (isSuccessfullyLoggedIn === true) {\n      LoggedInUser = receivedData.LoggedInUsername;\n      LoggedInStatement = LoggedInUser + \" successfully logged in!\";\n    }\n\n    data = {\n      isSuccessfullyLoggedIn: isSuccessfullyLoggedIn\n    };\n  }; //Runs on the first render\n  //And any time any dependency value changes\n\n\n  useEffect(() => getData(), []); // Login form\n\n  const renderForm = /*#__PURE__*/_jsxDEV(LoginForm, {\n    isError: data.isError,\n    ErrorMessage: data.ErrorMessage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container \",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outer ToCenter DarkGreenBox LoginBox BlogBox CurvedContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"middle\",\n        children: [/*#__PURE__*/_jsxDEV(LineTitle, {\n          Light: true,\n          Title: \"Login\",\n          OnlyLine: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), isSuccessfullyLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"MdFont CursiveFont LightGreenFontShade\",\n          children: LoggedInStatement\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 35\n        }, this) : renderForm, /*#__PURE__*/_jsxDEV(LineTitle, {\n          Light: true,\n          OnlyLine: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"TyidlrLq84wZAQ8sPDCb8gzRkNg=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Applications/Sandali/DietitianWebsite/client/src/pages/Login.jsx"],"names":["React","useState","LineTitle","LoginForm","Login","data","setData","LoggedInStatement","isSuccessfullyLoggedIn","ErrorMessage","isError","LoggedInUser","getData","url","fetch","then","response","json","receivedData","LoggedInUsername","useEffect","renderForm"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAGA,SAASC,KAAT,GAAiB;AAAA;;AACf,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAmBL,QAAQ,CAAC,EAAD,CAAjC;AACA,MAAIM,iBAAiB,GAAG,IAAxB;AACA,MAAIC,sBAAsB,GAAG,KAA7B;AAAA,MAAoCC,YAAY,GAAG,IAAnD;AACA,MAAKC,OAAO,GAAG,KAAf;AAAA,MAAsBC,YAAY,GAAG,IAArC;;AAEA,QAAMC,OAAO,GAAG,MAAM;AAClB,QAAIC,GAAG,GAAG,iCAAV,CADkB,CAC2B;;AAC7CC,IAAAA,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAiBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAA9B,EAA+CF,IAA/C,CAAqDG,YAAD,IAAkBZ,OAAO,CAACY,YAAD,CAA7E;AACAV,IAAAA,sBAAsB,GAAIU,YAAY,CAACV,sBAAvC;;AACA,QAAIA,sBAAsB,KAAK,KAA3B,IAAoCU,YAAY,CAACR,OAAb,KAAyB,IAAjE,EAAuE;AACrED,MAAAA,YAAY,GAAGS,YAAY,CAACT,YAA5B;AACAC,MAAAA,OAAO,GAAGQ,YAAY,CAACR,OAAvB;AACD,KAHD,MAGO,IAAKF,sBAAsB,KAAK,IAAhC,EAAuC;AAC5CG,MAAAA,YAAY,GAAGO,YAAY,CAACC,gBAA5B;AACAZ,MAAAA,iBAAiB,GAAGI,YAAY,GAAG,0BAAnC;AACD;;AACDN,IAAAA,IAAI,GAAG;AAAEG,MAAAA,sBAAsB,EAAEA;AAA1B,KAAP;AAGH,GAdD,CANe,CAsBf;AACA;;;AACAY,EAAAA,SAAS,CAAE,MAAMR,OAAO,EAAf,EAAmB,EAAnB,CAAT,CAxBe,CA0Bf;;AACA,QAAMS,UAAU,gBACd,QAAC,SAAD;AAAW,IAAA,OAAO,EAAEhB,IAAI,CAACK,OAAzB;AAAkC,IAAA,YAAY,EAAEL,IAAI,CAACI;AAArD;AAAA;AAAA;AAAA;AAAA,UADF;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,8DAAf;AAAA,6BACA;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACE,QAAC,SAAD;AAAW,UAAA,KAAK,EAAE,IAAlB;AAAwB,UAAA,KAAK,EAAC,OAA9B;AAAsC,UAAA,QAAQ,EAAE;AAAhD;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGD,sBAAsB,gBAAG;AAAK,UAAA,SAAS,EAAC,wCAAf;AAAA,oBAA0DD;AAA1D;AAAA;AAAA;AAAA;AAAA,gBAAH,GAAyFc,UAFlH,eAGE,QAAC,SAAD;AAAW,UAAA,KAAK,EAAE,IAAlB;AAAwB,UAAA,QAAQ,EAAE;AAAlC;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAzCQjB,K;;KAAAA,K;AA2CT,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport LineTitle from \"../Components/LineTitle\"\n\nimport LoginForm from \"../Components/LoginForm\";\n\n\nfunction Login() {\n  const [ data, setData] = useState([]);\n  let LoggedInStatement = null;\n  let isSuccessfullyLoggedIn = false, ErrorMessage = null;\n  let  isError = false, LoggedInUser = null;\n    \n  const getData = () => {\n      let url = 'http://localhost:3001/loginUser'; //URL of the resource we want to fetch\n      fetch(url).then((response) => response.json()).then((receivedData) => setData(receivedData));\n      isSuccessfullyLoggedIn =  receivedData.isSuccessfullyLoggedIn;\n      if( isSuccessfullyLoggedIn === false && receivedData.isError === true) {\n        ErrorMessage = receivedData.ErrorMessage;\n        isError = receivedData.isError;\n      } else if ( isSuccessfullyLoggedIn === true ) {\n        LoggedInUser = receivedData.LoggedInUsername\n        LoggedInStatement = LoggedInUser + \" successfully logged in!\"\n      }\n      data = { isSuccessfullyLoggedIn: isSuccessfullyLoggedIn,\n            \n       };\n  }\n\n  //Runs on the first render\n  //And any time any dependency value changes\n  useEffect( () => getData(), [] );\n\n  // Login form\n  const renderForm = (\n    <LoginForm isError={data.isError} ErrorMessage={data.ErrorMessage}/>\n  );\n\n  return (\n    <div className=\"container \">\n      <div className=\"outer ToCenter DarkGreenBox LoginBox BlogBox CurvedContainer\">\n      <div className=\"middle\">\n        <LineTitle Light={true} Title=\"Login\" OnlyLine={false}/>\n        {isSuccessfullyLoggedIn ? <div className=\"MdFont CursiveFont LightGreenFontShade\">{ LoggedInStatement }</div> : renderForm}\n        <LineTitle Light={true} OnlyLine={true}/>\n      </div></div>\n    </div>\n  );\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}