{"ast":null,"code":"// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes)\n  // but template placeholder characters don't fall into that range\n  // so skipping such miscellaneous \"exotic\" characters\n  // won't matter here for just counting placeholder character occurrences.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n}","map":{"version":3,"mappings":"AAAA;AACA,OAAO,SAASA,gBAAT,CAA0BC,MAA1B,EAAkCC,MAAlC,EAA0C;AAChD,MAAIC,KAAK,GAAG,CAAZ,CADgD,CAEhD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,uBAAwBD,MAAM,CAACE,KAAPF,CAAa,EAAbA,CAAxB,kHAA0C;AAAA;;AAAA;AAAA;AAAAG;AAAA;AAAAC;AAAA;AAAAD;AAAA;;AAAA,QAA/BE,SAA+B;;AACzC,QAAIA,SAAS,KAAKN,MAAlB,EAA0B;AACzBE,WAAK;AACL;AACD;;AACD,SAAOA,KAAP;AACA","names":["count_occurences","symbol","string","count","split","_ref","_i","character"],"sources":["/Applications/Sandali/DietitianWebsite/client/node_modules/input-format/source/helpers.js"],"sourcesContent":["// Counts all occurences of a symbol in a string\r\nexport function count_occurences(symbol, string) {\r\n\tlet count = 0\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes)\r\n\t// but template placeholder characters don't fall into that range\r\n\t// so skipping such miscellaneous \"exotic\" characters\r\n\t// won't matter here for just counting placeholder character occurrences.\r\n\tfor (const character of string.split('')) {\r\n\t\tif (character === symbol) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\treturn count\r\n}"]},"metadata":{},"sourceType":"module"}