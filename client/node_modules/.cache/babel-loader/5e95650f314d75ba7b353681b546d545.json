{"ast":null,"code":"import Metadata from '../metadata';\nimport getNumberType from './getNumberType';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest and fastest one.\n    // Leading digits patterns are only defined for about 20% of all countries.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // Matching \"leading digits\" is a sufficient but not necessary condition.\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      return country;\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,IAAMC,+BAA+B,GAAG,KAAxC;AAEA,eAAe,SAASC,uBAAT,CAAiCC,WAAjC,EAA8CC,mBAA9C,EAAmEC,QAAnE,EAA6E;AAC3F;AACA,MAAIJ,+BAAJ,EAAqC;AACpC,QAAII,QAAQ,CAACC,0BAATD,CAAoCF,WAApCE,CAAJ,EAAsD;AACrD,aAAO,KAAP;AACA;AALyF,IAO3F;;;AACA,MAAME,iBAAiB,GAAGF,QAAQ,CAACG,6BAATH,CAAuCF,WAAvCE,CAA1B;;AACA,MAAI,CAACE,iBAAL,EAAwB;AACvB;AAV0F,IAY3F;AACA;;;AACA,MAAIA,iBAAiB,CAACE,MAAlBF,KAA6B,CAAjC,EAAoC;AACnC,WAAOA,iBAAiB,CAAC,CAAD,CAAxB;AACA;;AACD,SAAOG,qBAAqB,CAACH,iBAAD,EAAoBH,mBAApB,EAAyCC,QAAQ,CAACA,QAAlD,CAA5B;AACA;;AAED,SAASK,qBAAT,CAA+BH,iBAA/B,EAAkDH,mBAAlD,EAAuEC,QAAvE,EAAiF;AAChF;AACAA,UAAQ,GAAG,IAAIN,QAAJ,CAAaM,QAAb,CAAXA;;AACA,uBAAsBE,iBAAtB,kHAAyC;AAAA;;AAAA;AAAA;AAAAI;AAAA;AAAAC;AAAA;AAAAD;AAAA;;AAAA,QAA9BE,OAA8B;AACxCR,YAAQ,CAACQ,OAATR,CAAiBQ,OAAjBR,EADwC,CAExC;AACA;AACA;AACA;;AACA,QAAIA,QAAQ,CAACS,aAATT,EAAJ,EAA8B;AAC7B,UAAID,mBAAmB,IACtBA,mBAAmB,CAACW,MAApBX,CAA2BC,QAAQ,CAACS,aAATT,EAA3BD,MAAyD,CAD1D,EAC6D;AAC5D,eAAOS,OAAP;AACA;AAJF,MAMA;AACA;AAPA,SAQK,IAAIb,aAAa,CAAC;AAAEgB,WAAK,EAAEZ,mBAAT;AAA8BS,aAAO,EAAPA;AAA9B,KAAD,EAA0CI,SAA1C,EAAqDZ,QAAQ,CAACA,QAA9D,CAAjB,EAA0F;AAC9F,aAAOQ,OAAP;AACA;AACD;AACD","names":["Metadata","getNumberType","USE_NON_GEOGRAPHIC_COUNTRY_CODE","getCountryByCallingCode","callingCode","nationalPhoneNumber","metadata","isNonGeographicCallingCode","possibleCountries","getCountryCodesForCallingCode","length","selectCountryFromList","_ref","_i","country","leadingDigits","search","phone","undefined"],"sources":["/Applications/Sandali/DietitianWebsite/client/node_modules/libphonenumber-js/source/helpers/getCountryByCallingCode.js"],"sourcesContent":["import Metadata from '../metadata'\r\nimport getNumberType from './getNumberType'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\t// Is always non-empty, because `callingCode` is always valid\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata)\r\n}\r\n\r\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\r\n\t// Re-create `metadata` because it will be selecting a `country`.\r\n\tmetadata = new Metadata(metadata)\r\n\tfor (const country of possibleCountries) {\r\n\t\tmetadata.country(country)\r\n\t\t// Leading digits check would be the simplest and fastest one.\r\n\t\t// Leading digits patterns are only defined for about 20% of all countries.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\r\n\t\t// Matching \"leading digits\" is a sufficient but not necessary condition.\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}